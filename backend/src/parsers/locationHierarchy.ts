import { Page } from 'puppeteer';
import { delay, log } from '../utils/helpers';
import { PARSER_CONFIG } from '../config/parser';
import fs from 'fs';
import path from 'path';
import { RequestTracker } from './requestTracker';

interface Country {
  code: string;
  name: string;
  url: string;
}

interface City {
  id: string;
  name: string;
  country: string;
  url: string;
}

interface Location {
  id: string;
  name: string;
  city: string;
  url: string;
}

export class LocationHierarchy {
  private dataPath = path.join(__dirname, '../../data/locations');
  private requestTracker: RequestTracker;
  
  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    if (!fs.existsSync(this.dataPath)) {
      fs.mkdirSync(this.dataPath, { recursive: true });
    }
    
    this.requestTracker = new RequestTracker();
  }

  // –®–∞–≥ 1: –ü–∞—Ä—Å–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
  async parseCountries(page: Page): Promise<Country[]> {
    log('üåç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω...');
    
    const countries: Country[] = [];
    let currentPage = 1;
    let hasMorePages = true;
    
    while (hasMorePages && currentPage <= 10) { // –õ–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      try {
        log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—Ä–∞–Ω ${currentPage}...`);
        
        await page.goto(`https://www.instagram.com/explore/locations/?page=${currentPage}`, {
          waitUntil: 'networkidle2'
        });
        
        await delay(3000);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageCountries = await page.evaluate(() => {
          const countryLinks = Array.from(document.querySelectorAll('a[href*="/explore/locations/"]'));
          
          return countryLinks
            .map(link => {
              const href = link.getAttribute('href') || '';
              const text = link.textContent?.trim() || '';
              
              // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω—ã (—Ñ–æ—Ä–º–∞—Ç: /explore/locations/XX/country-name/)
              const countryMatch = href.match(/\/explore\/locations\/([A-Z]{2})\/([^\/]+)\//);
              
              if (countryMatch) {
                return {
                  code: countryMatch[1],
                  name: text,
                  url: href
                };
              }
              return null;
            })
            .filter(country => country !== null);
        });
        
        log(`üìç –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–∞–π–¥–µ–Ω–æ ${pageCountries.length} —Å—Ç—Ä–∞–Ω`);
        
        if (pageCountries.length === 0) {
          hasMorePages = false;
        } else {
          countries.push(...pageCountries);
          currentPage++;
        }
        
        await delay(2000);
        
      } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω ${currentPage}: ${error}`, 'error');
        hasMorePages = false;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—ã –≤ —Ñ–∞–π–ª
    const countriesFile = path.join(this.dataPath, 'countries.json');
    fs.writeFileSync(countriesFile, JSON.stringify(countries, null, 2));
    
    log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${countries.length} —Å—Ç—Ä–∞–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${countriesFile}`);
    
    return countries;
  }

  // –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º –≥–æ—Ä–æ–¥–∞ –≤ —Å—Ç—Ä–∞–Ω–µ (–£–∫—Ä–∞–∏–Ω–∞ –∏ –ü–æ–ª—å—à–∞)
  async parseCitiesInCountry(page: Page, countryCode: string, countryName: string): Promise<City[]> {
    log(`üèôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Å—Ç—Ä–∞–Ω–µ: ${countryName} (${countryCode})`);
    
    const cities: City[] = [];
    let currentPage = 1;
    let hasMorePages = true;
    
    while (hasMorePages && currentPage <= 50) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
      try {
        log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ—Ä–æ–¥–æ–≤ ${currentPage} –¥–ª—è ${countryName}...`);
        
        const url = `https://www.instagram.com/explore/locations/${countryCode}/${countryName.toLowerCase()}/?page=${currentPage}`;
        await page.goto(url, {
          waitUntil: 'networkidle2',
          timeout: 30000
        });
        
        await delay(3000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        const pageExists = await page.evaluate(() => {
          return !document.body.innerText.includes('Page Not Found') && 
                 !document.body.innerText.includes('Sorry, this page isn\'t available');
        });
        
        if (!pageExists) {
          log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤`);
          hasMorePages = false;
          break;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥–∞
        const pageCities = await page.evaluate((country) => {
          const cityLinks = Array.from(document.querySelectorAll('a[href*="/explore/locations/c"]'));
          
          return cityLinks
            .map(link => {
              const href = link.getAttribute('href') || '';
              const text = link.textContent?.trim() || '';
              
              // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥–∞ (—Ñ–æ—Ä–º–∞—Ç: /explore/locations/c123456/city-name/)
              const cityMatch = href.match(/\/explore\/locations\/(c\d+)\/([^\/]+)\//);
              
              if (cityMatch) {
                return {
                  id: cityMatch[1],
                  name: text,
                  country: country,
                  url: `https://www.instagram.com${href}` // –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
                };
              }
              return null;
            })
            .filter(city => city !== null);
        }, countryCode);
        
        log(`üìç –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–∞–π–¥–µ–Ω–æ ${pageCities.length} –≥–æ—Ä–æ–¥–æ–≤`);
        
        if (pageCities.length === 0) {
          hasMorePages = false;
        } else {
          cities.push(...pageCities);
          currentPage++;
        }
        
        await delay(2000);
        
      } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}: ${error}`, 'error');
        hasMorePages = false;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–∞–π–ª
    const citiesFile = path.join(this.dataPath, `cities_${countryCode}.json`);
    fs.writeFileSync(citiesFile, JSON.stringify(cities, null, 2));
    
    log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ ${countryName} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${cities.length} –≥–æ—Ä–æ–¥–æ–≤`);
    
    // –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for (let i = 0; i < cities.length; i++) {
      const city = cities[i];
      log(`üèôÔ∏è –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${i + 1}/${cities.length}: ${city.name}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (!page || page.isClosed()) {
          log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥', 'error');
          break;
        }
        
        await this.parseLocationsInCity(page, city.id, city.name);
        
        // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
        await delay(PARSER_CONFIG.delays.betweenCities);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –≥–æ—Ä–æ–¥–æ–≤
        if ((i + 1) % 10 === 0) {
          log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${cities.length} –≥–æ—Ä–æ–¥–æ–≤`);
        }
        
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city.name}: ${error}`, 'error');
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è (–±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã–ª—Å—è) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (error instanceof Error && error.message.includes('Target closed')) {
          log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤', 'error');
          break;
        }
        
        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        continue;
      }
    }
    
    return cities;
  }

  // –®–∞–≥ 3: –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞—Ü–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏)
  async parseLocationsInCity(page: Page, cityId: string, cityName: string): Promise<Location[]> {
    log(`üìç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ: ${cityName} (${cityId})`);
    
    const locations: Location[] = [];
    let currentPage = 1;
    let hasMorePages = true;
    
    while (hasMorePages && currentPage <= PARSER_CONFIG.limits.maxPagesPerCity) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞—É–∑–∞
        await this.requestTracker.takeCooldownIfNeeded();
        
        log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–∫–∞—Ü–∏–π ${currentPage} –¥–ª—è ${cityName}...`);
        
        const url = `https://www.instagram.com/explore/locations/${cityId}/${cityName.toLowerCase()}/?page=${currentPage}`;
        await page.goto(url, {
          waitUntil: 'networkidle2',
          timeout: 30000
        });

        // –ü–æ—Å–ª–µ page.goto –¥–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫—É:
        await page.goto(url, {
        waitUntil: 'networkidle2',
        timeout: 30000
        });

        // –î–û–ë–ê–í–¨ –≠–¢–£ –ü–†–û–í–ï–†–ö–£:
        const pageContent = await page.content();
        if (pageContent.includes('–†–µ—Å—É—Ä—Å (Page) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π') || pageContent.includes('–Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏')) {
        log('üö´ Instagram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º —Å —ç—Ç–æ–≥–æ IP', 'error');
        hasMorePages = false;
        break;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.requestTracker.incrementRequest();
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø—Ä–æ—Å–æ–≤
        const stats = this.requestTracker.getStats();
        if (stats.currentRequests % 5 === 0) {
          log(`üìä –ó–∞–ø—Ä–æ—Å–æ–≤: ${stats.currentRequests}/${PARSER_CONFIG.limits.requestsBeforeCooldown} (–¥–æ –ø–∞—É–∑—ã: ${stats.nextCooldownIn})`);
        }
        
        await delay(PARSER_CONFIG.delays.pageLoad);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const pageExists = await page.evaluate(() => {
          return !document.body.innerText.includes('Page Not Found') && 
                 !document.body.innerText.includes('Sorry, this page isn\'t available') &&
                 !document.body.innerText.includes('429');
        });
        
        if (!pageExists) {
          log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞—Ü–∏–π ${currentPage} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥`);
          hasMorePages = false;
          break;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
        const pageLocations = await page.evaluate((city) => {
          const locationLinks = Array.from(document.querySelectorAll('a[href*="/explore/locations/"]'));
          
          return locationLinks
            .map(link => {
              const href = link.getAttribute('href') || '';
              const text = link.textContent?.trim() || '';
              
              // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: /explore/locations/123456/location-name/)
              const locationMatch = href.match(/\/explore\/locations\/(\d+)\/([^\/]+)\//);
              
              if (locationMatch && !href.includes('/c') && locationMatch[1].length >= 6) {
                return {
                  id: locationMatch[1],
                  name: text,
                  city: city,
                  url: `https://www.instagram.com${href}` // –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
                };
              }
              return null;
            })
            .filter(location => location !== null);
        }, cityName);
        
        log(`üìç –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–∞–π–¥–µ–Ω–æ ${pageLocations.length} –ª–æ–∫–∞—Ü–∏–π`);
        
        if (pageLocations.length === 0) {
          hasMorePages = false;
        } else {
          locations.push(...pageLocations);
          currentPage++;
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await delay(PARSER_CONFIG.delays.betweenRequests);
        
      } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}: ${error}`, 'error');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if (error instanceof Error && (error.message.includes('429') || error.message.includes('blocked'))) {
          log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç...', 'error');
          await delay(600000); // 10 –º–∏–Ω—É—Ç
        }
        
        currentPage++;
        if (currentPage > 10) { 
          hasMorePages = false;
        }
      }
    }
    
    // –ó–ê–ú–ï–ù–ò–¢–¨ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –º–µ—Ç–æ–¥–∞ parseLocationsInCity (–ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü):

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalStats = this.requestTracker.getStats();
    log(`üìä –ì–æ—Ä–æ–¥ ${cityName} –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${finalStats.totalRequests}`);

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏
    const sanitizedCityName = cityName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
    const locationsFile = path.join(this.dataPath, `locations_${cityId}_${sanitizedCityName}.json`);

    let existingLocations: Location[] = [];
    if (fs.existsSync(locationsFile)) {
    try {
        const existingData = fs.readFileSync(locationsFile, 'utf8');
        existingLocations = JSON.parse(existingData);
        log(`üìã –ù–∞–π–¥–µ–Ω–æ ${existingLocations.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è ${cityName}`);
    } catch (error) {
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–∫–∞—Ü–∏–π: ${error}`, 'warn');
    }
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const allLocations = [...existingLocations];
    let newLocationsCount = 0;

    for (const newLocation of locations) {
    const exists = existingLocations.some(existing => existing.id === newLocation.id);
    if (!exists) {
        allLocations.push(newLocation);
        newLocationsCount++;
    }
    }

    log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:`);
    log(`   –ë—ã–ª–æ –ª–æ–∫–∞—Ü–∏–π: ${existingLocations.length}`);
    log(`   –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${locations.length}`);
    log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${newLocationsCount}`);
    log(`   –ò—Ç–æ–≥–æ –ª–æ–∫–∞—Ü–∏–π: ${allLocations.length}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    fs.writeFileSync(locationsFile, JSON.stringify(allLocations, null, 2));

    log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–π ${cityName} –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${allLocations.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π`);

    return allLocations;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  getLocationsForCity(cityName: string): string[] {
    try {
      if (!fs.existsSync(this.dataPath)) {
        return [];
      }

      const files = fs.readdirSync(this.dataPath);
      const locationFile = files.find(file => 
        file.includes('locations_') && 
        file.toLowerCase().includes(cityName.toLowerCase())
      );
      
      if (locationFile) {
        const data = fs.readFileSync(path.join(this.dataPath, locationFile), 'utf8');
        const locations: Location[] = JSON.parse(data);
        return locations.map(loc => loc.id);
      }
      
      return [];
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –¥–ª—è ${cityName}: ${error}`, 'error');
      return [];
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
  getRequestStats() {
    return this.requestTracker.getStats();
  }
}