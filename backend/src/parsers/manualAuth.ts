import { Page } from 'puppeteer';
import { delay, log } from '../utils/helpers';
import { CookieManager } from '../utils/cookieManager';

export class ManualInstagramAuth {
  private cookieManager: CookieManager;

  constructor() {
    this.cookieManager = new CookieManager();
  }

  async checkAuthStatus(page: Page): Promise<boolean> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies
      const cookiesLoaded = await this.cookieManager.loadCookies(page);
      
      if (cookiesLoaded) {
        log('Checking saved authentication...');
        const isValid = await this.cookieManager.isAuthValid(page);
        
        if (isValid) {
          log('‚úÖ Using saved authentication - no manual login needed!');
          return true;
        } else {
          log('‚ùå Saved authentication expired');
          this.cookieManager.clearCookies();
        }
      }
      
      return false;
      
    } catch (error) {
      log(`Auth check error: ${error}`, 'error');
      return false;
    }
  }

  async waitForManualLogin(page: Page): Promise<boolean> {
  try {
    log('Opening Instagram for manual login...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    await page.goto('https://www.instagram.com/accounts/login/', {
      waitUntil: 'networkidle2'
    });
    
    log('='.repeat(60));
    log('üîì MANUAL LOGIN REQUIRED');
    log('1. Login to Instagram manually in the browser');
    log('2. After login, authentication will be saved automatically');
    log('3. System checks status every 10 seconds');
    log('‚è±Ô∏è  Take your time - no rush');
    log('='.repeat(60));
    
    // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    let attempts = 0;
    
    while (attempts < 60) { // –ú–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç
      await delay(10000);
      attempts++;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–µ—Ç–∞—á–∏–ª–∞—Å—å
        if (page.isClosed()) {
          log('Page was closed, aborting', 'error');
          return false;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
        let currentUrl;
        try {
          currentUrl = page.url();
        } catch (e) {
          log(`Frame detached, skipping check ${attempts}`, 'warn');
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
        if (!currentUrl.includes('/accounts/login/')) {
          const isLoggedIn = await page.evaluate(() => {
            try {
              const hasLoginForm = document.querySelector('input[name="username"]');
              const hasUserElements = document.querySelector('nav') || 
                                    document.querySelector('[role="navigation"]') ||
                                    document.querySelector('svg[aria-label*="Home"]') ||
                                    document.querySelector('a[href="/"]');
              
              return !hasLoginForm && !!hasUserElements;
            } catch (e) {
              return false;
            }
          }).catch(() => false);
          
          if (isLoggedIn) {
            log('‚úÖ Manual login detected! Saving authentication...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
            try {
              await this.cookieManager.saveCookies(page);
              log('üîí Authentication saved successfully!');
            } catch (e) {
              log(`Cookie save failed: ${e}`, 'warn');
            }
            
            return true;
          }
        }
        
        if (attempts % 6 === 0) {
          log(`‚è≥ Attempt ${attempts}/60: Still waiting for login...`);
        }
        
      } catch (e) {
        log(`Check attempt ${attempts} failed: ${e}`, 'warn');
        continue;
      }
    }
    
    log('‚ùå Manual login timeout', 'error');
    return false;
    
  } catch (error) {
    log(`Manual login error: ${error}`, 'error');
    return false;
  }
}
}