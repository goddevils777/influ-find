import { PARSER_CONFIG } from '../config/parser';
import { log } from '../utils/helpers';

export class RequestTracker {
  private requestCount: number = 0;
  private totalRequests: number = 0;
  private cooldownCount: number = 0;

  incrementRequest(): void {
    this.requestCount++;
    this.totalRequests++;
  }

  shouldTakeCooldown(): boolean {
    return this.requestCount >= PARSER_CONFIG.limits.requestsBeforeCooldown;
  }

  async takeCooldownIfNeeded(): Promise<void> {
    if (this.shouldTakeCooldown()) {
      this.cooldownCount++;
      const pauseMinutes = PARSER_CONFIG.delays.cooldownPause / 60000;
      
      log(`‚è∏Ô∏è  –ü–ê–£–ó–ê #${this.cooldownCount}: –°–¥–µ–ª–∞–Ω–æ ${this.requestCount} –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–∞—É–∑–∞ ${pauseMinutes} –º–∏–Ω—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...`);
      log(`üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${this.totalRequests}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
      for (let i = pauseMinutes; i > 0; i--) {
        log(`‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${i} –º–∏–Ω—É—Ç –¥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...`);
        await new Promise(resolve => setTimeout(resolve, 60000)); // 1 –º–∏–Ω—É—Ç–∞
      }
      
      this.requestCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      log(`‚ñ∂Ô∏è  –ü–∞—É–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...`);
    }
  }

  getStats(): { 
    currentRequests: number; 
    totalRequests: number; 
    cooldownCount: number;
    nextCooldownIn: number;
  } {
    return {
      currentRequests: this.requestCount,
      totalRequests: this.totalRequests,
      cooldownCount: this.cooldownCount,
      nextCooldownIn: PARSER_CONFIG.limits.requestsBeforeCooldown - this.requestCount
    };
  }

  reset(): void {
    this.requestCount = 0;
    this.totalRequests = 0;
    this.cooldownCount = 0;
  }
}