import { PARSER_CONFIG } from '../config/parser';
import { delay, randomDelay, log, formatFollowersCount, generateUserId } from '../utils/helpers';
import { Influencer } from '../models/influencer';
import { LocationCache } from './locationCache';

export class PostParser {
  private page: any;
  private cache: LocationCache;

  constructor(page: any) {
    this.page = page;
    this.cache = new LocationCache();
  }

async parseLocationPosts(locationUrl: string, maxPosts: number = 10, forceRefresh: boolean = false): Promise<Partial<Influencer>[]> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ URL
      const locationId = this.extractLocationId(locationUrl);
      if (!locationId) {
        log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ URL: ${locationUrl}`, 'error');
        return [];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    const forceRefresh = arguments.length > 2 ? arguments[2] : false; // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    if (!forceRefresh && this.cache.hasCache(locationId)) {
    const cachedInfluencers = this.cache.getCache(locationId);
    if (cachedInfluencers.length > 0) {
        log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId}: ${cachedInfluencers.length}`);
        return cachedInfluencers;
    }
    }

    if (forceRefresh) {
    log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId}`);
    }

      log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –ø–æ URL: ${locationUrl}`);
      
      await this.page.goto(locationUrl, {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      
      await delay(PARSER_CONFIG.delays.pageLoad);
            
        // –ò—â–µ–º –ø–æ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–∫–∞—Ü–∏–∏
        const posts = await this.page.evaluate((maxPosts: number) => {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤
        const selectors = [
            'article a[href*="/p/"]',
            'a[href*="/p/"]',
            '[role="link"][href*="/p/"]',
            'div a[href*="/p/"]'
        ];
        
        let foundLinks: string[] = [];
        
        for (const selector of selectors) {
            const links = Array.from(document.querySelectorAll(selector));
            console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä "${selector}" –Ω–∞—à–µ–ª: ${links.length} —Å—Å—ã–ª–æ–∫`);
            
            if (links.length > 0) {
            foundLinks = links
                .slice(0, maxPosts)
                .map((link: any) => link.href)
                .filter((href: string) => href && href.includes('/p/'));
            
            console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: ${foundLinks.length}`);
            break;
            }
        }
        
        return foundLinks;
        }, maxPosts);

        log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏`);

        // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç - –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (posts.length === 0) {
        log(`‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
        
        const pageInfo = await this.page.evaluate(() => {
            return {
            title: document.title,
            url: window.location.href,
            hasMain: !!document.querySelector('main'),
            hasArticles: document.querySelectorAll('article').length,
            allLinksCount: document.querySelectorAll('a').length,
            postLinksCount: document.querySelectorAll('a[href*="/p/"]').length,
            bodyText: document.body.innerText.substring(0, 200)
            };
        });
        
        log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pageInfo.title}`);
        log(`üìÑ URL: ${pageInfo.url}`);
        log(`üìÑ Articles: ${pageInfo.hasArticles}`);
        log(`üìÑ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: ${pageInfo.allLinksCount}`);
        log(`üìÑ –°—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã: ${pageInfo.postLinksCount}`);
        log(`üìÑ –¢–µ–∫—Å—Ç: ${pageInfo.bodyText}`);
        }
      const influencers: Partial<Influencer>[] = [];
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
      for (let i = 0; i < Math.min(posts.length, maxPosts); i++) {
        try {
          const postUrl = posts[i];
          log(`üìÑ –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç ${i + 1}/${posts.length}: ${postUrl}`);
          
          await this.page.goto(postUrl, { waitUntil: 'networkidle2', timeout: 15000 });
          await delay(2000);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞
          const username = await this.page.evaluate(() => {
            const usernameLink = document.querySelector('header a[role="link"]');
            if (usernameLink) {
              const href = usernameLink.getAttribute('href');
              return href ? href.replace(/\//g, '') : null;
            }
            return null;
          });
          
          if (username && !influencers.find(inf => inf.username === username)) {
            log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É reels...`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É reels –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const reelsUrl = `https://www.instagram.com/${username}/reels/`;
            await this.page.goto(reelsUrl, { waitUntil: 'networkidle2', timeout: 15000 });
            await delay(3000);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É reels
         // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É reels
const profileData = await this.page.evaluate(() => {
  console.log('=== –û–¢–õ–ê–î–ö–ê –ü–†–û–§–ò–õ–Ø ===');
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  let followersText = '0';
  const followerSelectors = [
    'a[href*="/followers/"] span[title]',
    'a[href*="/followers/"] span',
    '[data-testid="followers"] span',
    'header section ul li:nth-child(2) span',
    'header section ul li a span'
  ];
  
  for (const selector of followerSelectors) {
    const element = document.querySelector(selector);
    if (element) {
      followersText = element.getAttribute('title') || element.textContent || '0';
      console.log(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}": ${followersText}`);
      break;
    }
  }
  // –ü–æ–ª—É—á–∞–µ–º –±–∏–æ - –∏—â–µ–º –≤ span —Å –∫–ª–∞—Å—Å–∞–º–∏ _ap3a –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
let bio = '';
console.log('=== –ü–û–ò–°–ö –ë–ò–û –í –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–ï ===');

// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º span —Å –∫–ª–∞—Å—Å–∞–º–∏ _ap3a, _aaco –∏ —Ç.–¥.
const bioSpans = document.querySelectorAll('span[class*="_ap3a"], span[class*="_aaco"]');
console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö span –¥–ª—è –±–∏–æ: ${bioSpans.length}`);

for (const span of bioSpans) {
  const text = span.textContent?.trim() || '';
  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º span —Å –±–∏–æ: "${text.substring(0, 100)}..."`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  if (text.length > 10 && 
      text.length < 500 && 
      !text.includes('–ø–æ–¥–ø–∏—Å—á–∏–∫') && 
      !text.includes('–ø—É–±–ª–∏–∫–∞—Ü') &&
      !text.match(/^@\w+$/) && // –Ω–µ –ø—Ä–æ—Å—Ç–æ @username
      (text.includes(':') || text.includes('Ukraine') || text.includes('@') || text.includes('üìÆ') || text.length > 20)) {
    
    bio = text; // –û–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–ö –ï–°–¢–¨
    console.log(`‚úÖ –ë–∏–æ –Ω–∞–π–¥–µ–Ω–æ: "${bio.substring(0, 100)}..."`);
    break;
  }
}

// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
if (!bio) {
  console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –±–∏–æ...');
  
  // –ò—â–µ–º div —Å role="button" –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–∏–æ
  const buttonDivs = document.querySelectorAll('div[role="button"]');
  for (const div of buttonDivs) {
    const text = div.textContent?.trim() || '';
    if (text.length > 20 && 
        text.length < 500 && 
        (text.includes('Ukraine') || text.includes('@') || text.includes(':'))) {
      
      bio = text; // –û–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–ö –ï–°–¢–¨
      console.log(`‚úÖ –ë–∏–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ: "${bio.substring(0, 100)}..."`);
      break;
    }
  }
}

console.log(`=== –ò–¢–û–ì –ë–ò–û: "${bio.substring(0, 100)}..." ===`);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
  let fullName = '';
  const nameSelectors = [
    'header section div h2',
    'header section h2',
    'header h2',
    'h1'
  ];
  
  for (const selector of nameSelectors) {
    const element = document.querySelector(selector);
    if (element) {
      fullName = element.textContent || '';
      console.log(`–ò–º—è –Ω–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}": ${fullName}`);
      break;
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É reels - –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ
  const reelsSelectors = [
    'article a[href*="/reel/"]',
    'a[href*="/reel/"]',
    'div[role="button"] a[href*="/reel/"]'
  ];
  
  let reelsVideos: any[] = [];
  for (const selector of reelsSelectors) {
    reelsVideos = Array.from(document.querySelectorAll(selector));
    if (reelsVideos.length > 0) {
      console.log(`Reels –Ω–∞–π–¥–µ–Ω—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}": ${reelsVideos.length} –≤–∏–¥–µ–æ`);
      break;
    }
  }
  const reelsStats = reelsVideos.slice(0, 4).map((reel: any, index: number) => {
  console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º reel ${index + 1}:`, reel.href);
  
  // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∏–¥–µ–æ
  const videoContainer = reel.closest('div') || reel.parentElement;
  
  let views = '0';
  if (videoContainer) {
    // –°–ù–ê–ß–ê–õ–ê –ò–©–ï–ú –ò–ö–û–ù–ö–£ –ü–†–û–°–ú–û–¢–†–û–í
    const viewIcon = videoContainer.querySelector('svg[aria-label*="–ø—Ä–æ—Å–º–æ—Ç—Ä"], svg[aria-label*="view"], svg[aria-label*="–ó–Ω–∞—á–æ–∫ —á–∏—Å–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"]');
    
    if (viewIcon) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
      
      // –ò—â–µ–º span —Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      const iconParent = viewIcon.closest('div');
      if (iconParent) {
        const nearbySpans = iconParent.querySelectorAll('span');
        for (const span of nearbySpans) {
          const text = span.textContent || '';
          const cleanText = text.replace(/\s/g, '');
          
          if (text.match(/[\d\s]+/) && !text.includes('–ø–æ–¥–ø–∏—Å—á–∏–∫')) {
            const num = parseInt(cleanText.replace(/[^\d]/g, ''));
            if (num > 10) {
              views = cleanText;
              console.log(`‚úÖ –ü–†–û–°–ú–û–¢–†–´ –Ω–∞–π–¥–µ–Ω—ã —Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π –¥–ª—è reel ${index + 1}: ${views}`);
              break;
            }
          }
        }
      }
    }
    
    // –ï–°–õ–ò –ù–ï –ù–ê–®–õ–ò –†–Ø–î–û–ú –° –ò–ö–û–ù–ö–û–ô, –∏—â–µ–º –≤ html-span –ù–û –¢–û–õ–¨–ö–û –ë–û–õ–¨–®–ò–ï –ß–ò–°–õ–ê
    if (views === '0') {
      const htmlSpans = videoContainer.querySelectorAll('span.html-span');
      console.log(`–ò—â–µ–º –≤ html-span —ç–ª–µ–º–µ–Ω—Ç–∞—Ö: ${htmlSpans.length}`);
      
      for (const span of htmlSpans) {
        const text = span.textContent || '';
        const cleanText = text.replace(/\s/g, '');
        
        if (text.match(/[\d\s]+/)) {
          const num = parseInt(cleanText.replace(/[^\d]/g, ''));
          
          // –ü–†–û–°–ú–û–¢–†–´ –û–ë–´–ß–ù–û –ë–û–õ–¨–®–ï –õ–ê–ô–ö–û–í - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ 100
          if (num > 100) {
            views = cleanText;
            console.log(`‚úÖ –ü–†–û–°–ú–û–¢–†–´ –Ω–∞–π–¥–µ–Ω—ã –≤ html-span –¥–ª—è reel ${index + 1}: ${views} (${num} > 100)`);
            break;
          } else {
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–æ–µ —á–∏—Å–ª–æ –≤ html-span: ${num} (–≤–µ—Ä–æ—è—Ç–Ω–æ –ª–∞–π–∫–∏)`);
          }
        }
      }
    }
    
    // –ü–û–°–õ–ï–î–ù–ò–ô –†–ï–ó–ï–†–í - –∏—â–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    if (views === '0') {
      console.log('–ò—â–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã...');
      const allSpans = videoContainer.querySelectorAll('span');
      let maxNum = 0;
      let maxText = '0';
      
      for (const span of allSpans) {
        const text = span.textContent || '';
        const cleanText = text.replace(/\s/g, '');
        
        if (text.match(/[\d\s]+/) && !text.includes('–ø–æ–¥–ø–∏—Å—á–∏–∫')) {
          const num = parseInt(cleanText.replace(/[^\d]/g, ''));
          if (num > maxNum && num > 50) {
            maxNum = num;
            maxText = cleanText;
          }
        }
      }
      
      if (maxNum > 0) {
        views = maxText;
        console.log(`‚úÖ –ü–†–û–°–ú–û–¢–†–´ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è reel ${index + 1}: ${views}`);
      }
    }
  }
  
  console.log(`üéØ –ò–¢–û–ì–û –¥–ª—è reel ${index + 1}: views = "${views}"`);
  
  return {
    views: views,
    likes: '0'
  };
});
  
  console.log('=== –ò–¢–û–ì–û –î–ê–ù–ù–´–• ===');
  console.log('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:', followersText);
  console.log('–ë–∏–æ:', bio.substring(0, 100));
  console.log('–ò–º—è:', fullName);
  console.log('Reels –Ω–∞–π–¥–µ–Ω–æ:', reelsStats.length);
  
  return {
    followersText,
    bio,
    fullName,
    reelsStats
  };
});

log(`üë§ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è @${username}:`);
log(`   –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${profileData.followersText}`);
log(`   –ë–∏–æ: ${profileData.bio.substring(0, 50)}${profileData.bio.length > 50 ? '...' : ''}`);
log(`   –ò–º—è: ${profileData.fullName}`);
log(`   Reels: ${profileData.reelsStats.length}`);
            
            const followersCount = this.parseFollowersCount(profileData.followersText);
            
           if (followersCount >= PARSER_CONFIG.limits.minFollowers) {
            const influencer = {
                username: username,
                fullName: profileData.fullName || username,
                followersCount: followersCount,
                bio: profileData.bio,
                cityId: 'parsed_city',
                id: this.generateUserId(),
                categories: ['Local'],
                reelsViews: profileData.reelsStats.map((reel: any) => reel.views),
                reelsCount: profileData.reelsStats.length,
                createdAt: new Date()
            };
            
            influencers.push(influencer);
              
              const viewsList = profileData.reelsStats.map((reel: any) => reel.views).join(', ');
                log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä: @${username} (${followersCount.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã reels: ${viewsList})`);
            } else {
              log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω @${username} (${followersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞)`);
            }
          }
          
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞ ${i + 1}: ${error}`, 'error');
          continue;
        }
      }
      
      // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (influencers.length > 0) {
        this.cache.saveCache(locationId, influencers);
      }
      
      log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–∏. –ù–∞–π–¥–µ–Ω–æ ${influencers.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
      return influencers;
      
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–∏: ${error}`, 'error');
      return [];
    }
  }

  private extractLocationId(locationUrl: string): string | null {
    const match = locationUrl.match(/\/locations\/(\d+)\//);
    return match ? match[1] : null;
  }

  private calculateAverageViews(reelsStats: any[]): number {
    if (reelsStats.length === 0) return 0;
    
    const totalViews = reelsStats.reduce((sum, reel) => {
      const views = this.parseViewsCount(reel.views);
      return sum + views;
    }, 0);
    
    return Math.round(totalViews / reelsStats.length);
  }

  private parseViewsCount(viewsText: string): number {
    const text = viewsText.toLowerCase();
    const numMatch = text.match(/[\d.,]+/);
    if (!numMatch) return 0;
    
    const num = parseFloat(numMatch[0].replace(',', '.'));
    if (text.includes('k')) return Math.round(num * 1000);
    if (text.includes('m')) return Math.round(num * 1000000);
    return Math.round(num);
  }

private parseFollowersCount(followersText: string): number {
  if (!followersText || followersText === '0') return 0;
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const text = followersText.toLowerCase().trim();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ —Å K, M
  if (text.includes('k')) {
    const numMatch = text.match(/([\d.,]+)\s*k/);
    if (numMatch) {
      const num = parseFloat(numMatch[1].replace(',', '.'));
      return Math.round(num * 1000);
    }
  }
  
  if (text.includes('m')) {
    const numMatch = text.match(/([\d.,]+)\s*m/);
    if (numMatch) {
      const num = parseFloat(numMatch[1].replace(',', '.'));
      return Math.round(num * 1000000);
    }
  }
  
  // –î–ª—è —á–∏—Å–µ–ª —Å –∑–∞–ø—è—Ç—ã–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (44,352)
  const numWithCommas = text.match(/^[\d,]+$/);
  if (numWithCommas) {
    const result = parseInt(text.replace(/,/g, ''));
    log(`üìä –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: "${followersText}" ‚Üí —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    return result;
  }
  
  // –û–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ
  const simpleNum = parseInt(text.replace(/[^\d]/g, ''));
  return simpleNum || 0;
}

  private generateUserId(): string {
    return 'user_' + Math.random().toString(36).substr(2, 9);
  }

  private async extractUserProfile(username: string): Promise<Partial<Influencer> | null> {
    try {
      const profileUrl = `https://www.instagram.com/${username}/`;
      await this.page.goto(profileUrl, { waitUntil: 'networkidle2' });
      await delay(PARSER_CONFIG.delays.betweenRequests);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      const followersText = await this.page.$eval('a[href*="/followers/"] span', (el: any) => el.textContent);
      const followersCount = formatFollowersCount(followersText);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∏–æ
      const bio = await this.page.$eval('div.-vDIg span', (el: any) => el.textContent).catch(() => '');
      
      return {
        id: generateUserId(),
        username,
        fullName: username,
        followersCount,
        bio,
        postsCount: 0,
        engagementRate: Math.round((Math.random() * 5 + 1) * 10) / 10,
        email: `${username}@contact.com`,
        telegram: `@${username}`,
        categories: ['Local'],
        lastPostDate: new Date(),
        createdAt: new Date()
      };
      
    } catch (error) {
      log(`Error extracting profile for ${username}: ${error}`, 'warn');
      return null;
    }
  }

  async extractUserDetails(username: string): Promise<Partial<Influencer> | null> {
    try {
      await delay(PARSER_CONFIG.delays.betweenRequests);
      
      log(`Extracting details for user: ${username}`);
      
      return {
        username,
        fullName: `–î–µ—Ç–∞–ª–∏ –¥–ª—è ${username}`,
        followersCount: Math.floor(Math.random() * 100000) + 5000,
        bio: `–î–µ—Ç–∞–ª—å–Ω–∞—è –±–∏–æ –¥–ª—è ${username}`,
        email: `${username}@contact.com`
      };
      
    } catch (error) {
      log(`Error extracting user details for ${username}: ${error}`, 'error');
      return null;
    }
  }
}