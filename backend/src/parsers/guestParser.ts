import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import { PARSER_CONFIG } from '../config/parser';
import { delay, log } from '../utils/helpers';

puppeteer.use(StealthPlugin());

export class GuestParser {
  private browser: any = null;
  private page: any = null;

  async init(): Promise<void> {
    try {
      this.browser = await puppeteer.launch({
        headless: false,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-blink-features=AutomationControlled',
          '--start-maximized',
          '--incognito' // –†–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
        ]
      });
      
      this.page = await this.browser.newPage();
      
      // –°–ª—É—á–∞–π–Ω—ã–π User-Agent
      const userAgent = PARSER_CONFIG.userAgents[
        Math.floor(Math.random() * PARSER_CONFIG.userAgents.length)
      ];
      await this.page.setUserAgent(userAgent);
      
      log('GuestParser initialized (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
    } catch (error) {
      log(`Failed to initialize guest parser: ${error}`, 'error');
      throw error;
    }
  }

  async testLocationAccess(cityId: string = 'c2373594', cityName: string = 'kyiv'): Promise<boolean> {
    try {
      if (!this.page) await this.init();
      
      log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
      const testUrl = `https://www.instagram.com/explore/locations/${cityId}/${cityName}/?page=1`;
      
      await this.page.goto(testUrl, {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      
      await delay(3000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageStatus = await this.page.evaluate(() => {
        const bodyText = document.body.innerText;
        
        return {
          has429: bodyText.includes('429'),
          hasBlocked: bodyText.includes('blocked') || bodyText.includes('rate limit'),
          hasNotFound: bodyText.includes('Page Not Found'),
          hasLoginPrompt: !!document.querySelector('input[name="username"]'),
          hasLocations: document.querySelectorAll('a[href*="/explore/locations/"]').length,
          pageTitle: document.title
        };
      });
      
      log(`üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`);
      log(`   - 429 –æ—à–∏–±–∫–∞: ${pageStatus.has429}`);
      log(`   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${pageStatus.hasBlocked}`);
      log(`   - –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${pageStatus.hasNotFound}`);
      log(`   - –¢—Ä–µ–±—É–µ—Ç –ª–æ–≥–∏–Ω: ${pageStatus.hasLoginPrompt}`);
      log(`   - –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: ${pageStatus.hasLocations}`);
      log(`   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pageStatus.pageTitle}`);
      
      // –ï—Å–ª–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫
      if (!pageStatus.has429 && !pageStatus.hasBlocked && pageStatus.hasLocations > 0) {
        log('‚úÖ –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞—Ü–∏–π –î–û–°–¢–£–ü–ù–ê!');
        return true;
      } else {
        log('‚ùå –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
        return false;
      }
      
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: ${error}`, 'error');
      return false;
    }
  }

  async parseLocationsAsGuest(cityId: string, cityName: string): Promise<any[]> {
    try {
      if (!this.page) await this.init();
      
      log(`üîç –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞—Ü–∏–∏ –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${cityName} (${cityId})`);
      
      const locations: any[] = [];
      let currentPage = 1;
      let hasMorePages = true;
      
      while (hasMorePages && currentPage <= 5) { // –õ–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        try {
          const url = `https://www.instagram.com/explore/locations/${cityId}/${cityName}/?page=${currentPage}`;
          
          log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: ${url}`);
          
          await this.page.goto(url, {
            waitUntil: 'networkidle2',
            timeout: 30000
          });
          
          await delay(5000); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          const pageCheck = await this.page.evaluate(() => {
            const bodyText = document.body.innerText;
            return {
              isBlocked: bodyText.includes('429') || bodyText.includes('blocked'),
              locationsCount: document.querySelectorAll('a[href*="/explore/locations/"]').length
            };
          });
          
          if (pageCheck.isBlocked) {
            log(`‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞`);
            hasMorePages = false;
            break;
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
          const pageLocations = await this.page.evaluate(() => {
            const locationLinks = Array.from(document.querySelectorAll('a[href*="/explore/locations/"]'));
            
            return locationLinks
              .map(link => {
                const href = link.getAttribute('href') || '';
                const text = link.textContent?.trim() || '';
                
                const locationMatch = href.match(/\/explore\/locations\/(\d+)\/([^\/]+)\//);
                
                if (locationMatch && !href.includes('/c') && locationMatch[1].length >= 6) {
                  return {
                    id: locationMatch[1],
                    name: text,
                    url: `https://www.instagram.com${href}`
                  };
                }
                return null;
              })
              .filter(location => location !== null);
          });
          
          log(`üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: –Ω–∞–π–¥–µ–Ω–æ ${pageLocations.length} –ª–æ–∫–∞—Ü–∏–π`);
          
          if (pageLocations.length === 0) {
            hasMorePages = false;
          } else {
            locations.push(...pageLocations);
            currentPage++;
          }
          
          // –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
          await delay(10000);
          
        } catch (error) {
          log(`–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}: ${error}`, 'error');
          hasMorePages = false;
        }
      }
      
      log(`‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${locations.length} –ª–æ–∫–∞—Ü–∏–π`);
      return locations;
      
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error}`, 'error');
      return [];
    }
  }

  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      this.page = null;
      log('GuestParser –∑–∞–∫—Ä—ã—Ç');
    }
  }
}