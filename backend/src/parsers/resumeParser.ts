import fs from 'fs';
import path from 'path';
import { LocationHierarchy } from './locationHierarchy';
import { Page } from 'puppeteer';
import { log } from '../utils/helpers';

interface City {
  id: string;
  name: string;
  country: string;
  url: string;
}

export class ResumeParser {
  private dataPath = path.join(__dirname, '../../data/locations');
  private hierarchy: LocationHierarchy;

  constructor() {
    this.hierarchy = new LocationHierarchy();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    getProcessedCities(): string[] {
    try {
        if (!fs.existsSync(this.dataPath)) {
        return [];
        }

        const files = fs.readdirSync(this.dataPath);
        const processedCities = files
        .filter(file => file.startsWith('locations_'))
        .map(file => {
            try {
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π
            const filePath = path.join(this.dataPath, file);
            const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            const match = file.match(/locations_(.+)_(.+)\.json/);
            if (match && data.length > 0) {
                return match[1]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞—Ü–∏–∏
            }
            
            return null;
            } catch (e) {
            return null;
            }
        })
        .filter(id => id !== null);

        log(`üîç –ù–∞–π–¥–µ–Ω–æ ${processedCities.length} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤`);
        return processedCities;
        
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: ${error}`, 'error');
        return [];
    }
    }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞
  getAllCities(countryCode: string): City[] {
    try {
      const citiesFile = path.join(this.dataPath, `cities_${countryCode}.json`);
      
      if (!fs.existsSync(citiesFile)) {
        log(`–§–∞–π–ª –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è ${countryCode} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }

      const data = fs.readFileSync(citiesFile, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ ${countryCode}: ${error}`, 'error');
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    getUnprocessedCities(countryCode: string): City[] {
    const allCities = this.getAllCities(countryCode);
    const successfullyProcessedCityIds = this.getProcessedCities();
    
    const unprocessedCities = allCities.filter(city => 
        !successfullyProcessedCityIds.includes(city.id)
    );

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≥–æ—Ä–æ–¥–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–æ 0 –ª–æ–∫–∞—Ü–∏–π
    const citiesWithZeroLocations = this.getCitiesWithZeroLocations();
    
    log(`üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${countryCode}:`);
    log(`   –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: ${allCities.length}`);
    log(`   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successfullyProcessedCityIds.length}`);
    log(`   –ì–æ—Ä–æ–¥–æ–≤ —Å 0 –ª–æ–∫–∞—Ü–∏–π: ${citiesWithZeroLocations.length}`);
    log(`   –¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${unprocessedCities.length}`);

    return unprocessedCities;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥–∞ —Å 0 –ª–æ–∫–∞—Ü–∏–π
    private getCitiesWithZeroLocations(): string[] {
    try {
        if (!fs.existsSync(this.dataPath)) {
        return [];
        }

        const files = fs.readdirSync(this.dataPath);
        const citiesWithZeroLocations = files
        .filter(file => file.startsWith('locations_'))
        .map(file => {
            try {
            const filePath = path.join(this.dataPath, file);
            const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            
            const match = file.match(/locations_(.+)_(.+)\.json/);
            if (match && data.length === 0) {
                log(`‚ö†Ô∏è  –ì–æ—Ä–æ–¥ ${match[2]} (${match[1]}) –∏–º–µ–µ—Ç 0 –ª–æ–∫–∞—Ü–∏–π - –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
                return match[1];
            }
            
            return null;
            } catch (e) {
            return null;
            }
        })
        .filter(id => id !== null);

        return citiesWithZeroLocations;
        
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å 0 –ª–æ–∫–∞—Ü–∏–π: ${error}`, 'error');
        return [];
    }
    }


 
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async resumeParsingUkraine(page: Page): Promise<void> {
  log('üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –£–∫—Ä–∞–∏–Ω—ã —Å —É—á–µ—Ç–æ–º –≥–æ—Ä–æ–¥–æ–≤ —Å 0 –ª–æ–∫–∞—Ü–∏–π...');
  
  const unprocessedCities = this.getUnprocessedCities('UA');
  
  if (unprocessedCities.length === 0) {
    log('‚úÖ –í—Å–µ –≥–æ—Ä–æ–¥–∞ –£–∫—Ä–∞–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
    return;
  }

  log(`üèôÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${unprocessedCities.length} –≥–æ—Ä–æ–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ä–æ–¥–æ–≤ —Å 0 –ª–æ–∫–∞—Ü–∏–π)...`);

  for (let i = 0; i < unprocessedCities.length; i++) {
    const city = unprocessedCities[i];
    
    try {
      log(`üèôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ ${i + 1}/${unprocessedCities.length}: ${city.name} (${city.id})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (!page || page.isClosed()) {
        log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥', 'error');
        break;
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É—Å—Ç–æ–π
      const sanitizedCityName = city.name.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
      const existingFile = path.join(this.dataPath, `locations_${city.id}_${sanitizedCityName}.json`);
      
      if (fs.existsSync(existingFile)) {
        try {
          const data = JSON.parse(fs.readFileSync(existingFile, 'utf8'));
          if (data.length === 0) {
            fs.unlinkSync(existingFile);
            log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city.name}`);
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
      }
      
      await this.hierarchy.parseLocationsInCity(page, city.id, city.name);
      
      log(`‚úÖ –ì–æ—Ä–æ–¥ ${city.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –≥–æ—Ä–æ–¥–æ–≤
      if ((i + 1) % 5 === 0) {
        log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${unprocessedCities.length} –≥–æ—Ä–æ–¥–æ–≤`);
      }
      
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ä–æ–¥–∞ ${city.name}: ${error}`, 'error');
      
      // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
      if (error instanceof Error && error.message.includes('Target closed')) {
        log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥', 'error');
        break;
      }
      
      continue;
    }
  }
  
  log('üéâ –ü–∞—Ä—Å–∏–Ω–≥ –£–∫—Ä–∞–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
getParsingStats(): any {
  try {
    const allCitiesUA = this.getAllCities('UA');
    const successfullyProcessedCities = this.getProcessedCities();
    const citiesWithZeroLocations = this.getCitiesWithZeroLocations();
    
    let totalLocations = 0;
    const files = fs.readdirSync(this.dataPath);
    
    files.filter(file => file.startsWith('locations_')).forEach(file => {
      try {
        const filePath = path.join(this.dataPath, file);
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        totalLocations += data.length;
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      }
    });

    const needsProcessing = allCitiesUA.length - successfullyProcessedCities.length;

    return {
      ukraine: {
        totalCities: allCitiesUA.length,
        processedCities: successfullyProcessedCities.length,
        citiesWithZeroLocations: citiesWithZeroLocations.length,
        remainingCities: needsProcessing,
        totalLocations: totalLocations,
        completionPercentage: Math.round((successfullyProcessedCities.length / allCitiesUA.length) * 100)
      }
    };
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`, 'error');
    return {};
  }
}
}