import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import { PARSER_CONFIG } from '../config/parser';
import { delay, log } from '../utils/helpers';
import { CookieManager } from '../utils/cookieManager';
import { LocationHierarchy } from './locationHierarchy';

puppeteer.use(StealthPlugin());

export class LocationParser {
  private browser: any = null;
  public page: any = null;
  private cookieManager: CookieManager;
  private hierarchy: LocationHierarchy;
  private guestMode: boolean;

  constructor(guestMode: boolean = false) {
    this.cookieManager = new CookieManager();
    this.hierarchy = new LocationHierarchy();
    this.guestMode = guestMode;
  }
// –í locationParser.ts –ó–ê–ú–ï–ù–ò–¢–¨ –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –º–µ—Ç–æ–¥–µ init():

async init(): Promise<void> {
  try {
    if (this.browser) {
      await this.browser.close();
    }

    // –£–õ–£–ß–®–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–†–ê–£–ó–ï–†–ê –î–õ–Ø –û–ë–•–û–î–ê –î–ï–¢–ï–ö–¶–ò–ò
    const launchOptions: any = {
      headless: false,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--disable-background-networking',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-field-trial-config',
        '--disable-ipc-flooding-protection',
        '--no-first-run',
        '--no-default-browser-check',
        '--disable-default-apps',
        '--disable-popup-blocking',
        '--disable-prompt-on-repost',
        '--disable-hang-monitor',
        '--disable-sync',
        '--disable-translate',
        '--disable-plugins',
        '--disable-plugins-discovery',
        '--disable-prerender-local-predictor',
        '--disable-threaded-animation',
        '--disable-threaded-scrolling',
        '--disable-in-process-stack-traces',
        '--disable-histogram-customizer',
        '--disable-gl-extensions',
        '--disable-composited-antialiasing',
        '--disable-canvas-aa',
        '--disable-3d-apis',
        '--disable-accelerated-2d-canvas',
        '--disable-accelerated-jpeg-decoding',
        '--disable-accelerated-mjpeg-decode',
        '--disable-app-list-dismiss-on-blur',
        '--disable-accelerated-video-decode',
        '--window-size=1366,768',
        '--start-maximized'
      ]
    };

    this.browser = await puppeteer.launch(launchOptions);

    // –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ö–û–ù–¢–ï–ö–°–¢ –° –û–ß–ò–°–¢–ö–û–ô –î–ê–ù–ù–´–•
    const context = await this.browser.createBrowserContext();
    this.page = await context.newPage();

    // –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ë–†–ê–£–ó–ï–†–ê
    await this.page.evaluateOnNewDocument(() => {
      // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      localStorage.clear();
      sessionStorage.clear();
      
      // –£–¥–∞–ª—è–µ–º WebDriver —Å–ª–µ–¥—ã
      Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined,
      });
      
      // –ú–∞—Å–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      });
      
      Object.defineProperty(navigator, 'languages', {
        get: () => ['en-US', 'en'],
      });
      
      // –£–¥–∞–ª—è–µ–º chrome –æ–±—ä–µ–∫—Ç
      if ('chrome' in window) {
        delete (window as any).chrome;
      }
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ cookies
    await this.page.deleteCookie(...(await this.page.cookies()));
    
    // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô USER-AGENT
    const userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36';
    await this.page.setUserAgent(userAgent);
    
    // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú VIEWPORT
    await this.page.setViewport({ 
      width: 1366, 
      height: 768,
      deviceScaleFactor: 1
    });
    
    // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò
    await this.page.setExtraHTTPHeaders({
      'Accept-Language': 'en-US,en;q=0.9',
      'Accept-Encoding': 'gzip, deflate, br',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Upgrade-Insecure-Requests': '1',
      'Cache-Control': 'max-age=0'
    });
    
    // –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    if (!this.guestMode) {
      log('üîç –†–µ–∂–∏–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      const savedAuth = await this.checkSavedAuth();
      
      if (!savedAuth) {
        log('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        await this.manualAuth();
      }
    } else {
      log('üë§ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    }
    
    log('LocationParser initialized successfully');
  } catch (error) {
    log(`Failed to initialize parser: ${error}`, 'error');
    throw error;
  }
}

  // –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // backend/src/parsers/locationParser.ts - –ó–ê–ú–ï–ù–ò–¢–¨ –º–µ—Ç–æ–¥ checkSavedAuth
    private async checkSavedAuth(): Promise<boolean> {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç cookies
        const cookieAge = this.cookieManager.getCookieAge();
        if (cookieAge !== null) {
        log(`üìÖ Cookie age: ${cookieAge.toFixed(1)} hours`);
        
        // –ï—Å–ª–∏ cookies —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –ª—É—á—à–µ –∏—Ö –æ–±–Ω–æ–≤–∏—Ç—å
        if (cookieAge > 24) {
            log('‚ö†Ô∏è Cookies are quite old, might need refresh');
        }
        }
        
        const cookiesLoaded = await this.cookieManager.loadCookies(this.page);
        
        if (cookiesLoaded) {
        log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await delay(2000);
        
        const isValid = await this.cookieManager.isAuthValid(this.page);
        
        if (isValid) {
            log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –õ–æ–≥–∏–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
            return true;
        } else {
            log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
            // –ù–ï –£–î–ê–õ–Ø–ï–ú cookies —Å—Ä–∞–∑—É, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
            log('üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏...');
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–π—Ç–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            try {
            await this.page.goto('https://www.instagram.com/accounts/edit/', { 
                waitUntil: 'networkidle2',
                timeout: 15000 
            });
            
            const urlAfterRedirect = this.page.url();
            
            if (!urlAfterRedirect.includes('/accounts/login/')) {
                log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å—Ç—å!');
                return true;
            } else {
                log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                this.cookieManager.clearCookies();
            }
            } catch (altError) {
            log(`‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${altError}`, 'warn');
            this.cookieManager.clearCookies();
            }
        }
        } else {
        log('üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç');
        }
        
        return false;
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}`, 'error');
        return false;
    }
    }

  private async manualAuth(): Promise<void> {
    await this.page.goto('https://www.instagram.com/accounts/login/', {
      waitUntil: 'networkidle2',
      timeout: 30000
    });
    
    await delay(2000);
    
    log('='.repeat(60));
    log('üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø INSTAGRAM –¢–†–ï–ë–£–ï–¢–°–Ø');
    log('1. –í–æ–π–¥–∏—Ç–µ –≤ Instagram –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    log('2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
    log('3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π');
    log('='.repeat(60));
    
    await new Promise<void>((resolve) => {
      process.stdin.once('data', () => {
        resolve();
      });
    });
    
    await this.page.goto('https://www.instagram.com/', {
      waitUntil: 'networkidle2'
    });
    
    const isAuth = await this.page.evaluate(() => {
      return !document.querySelector('input[name="username"]');
    });
    
    if (isAuth) {
      log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      await this.cookieManager.saveCookies(this.page);
      log('üíæ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ª–æ–≥–∏–Ω –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è!');
    } else {
      throw new Error('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }

  // –ù–û–í–´–ô –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// –ù–û–í–´–ô –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async findTopLocations(cityName: string): Promise<string[]> {
  try {
    if (!this.page) await this.init();
    
    log(`üîç –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    const savedLocations = this.hierarchy.getLocationsForCity(cityName);
    
    if (savedLocations.length > 0) {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${savedLocations.length} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è ${cityName}`);
      return savedLocations.slice(0, 20); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20
    }
    
    // –ï–°–õ–ò –ù–ï–¢ –õ–û–ö–ê–¶–ò–ô - –ò–©–ï–ú –ì–û–†–û–î –í –ë–ê–ó–ï –ì–û–†–û–î–û–í –ò –ü–ê–†–°–ò–ú –ï–ì–û
    log(`üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è ${cityName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –≥–æ—Ä–æ–¥–æ–≤...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    const fs = require('fs');
    const path = require('path');
    const citiesFile = path.join(__dirname, '../../data/locations/cities_UA.json');
    
    if (fs.existsSync(citiesFile)) {
      const cities = JSON.parse(fs.readFileSync(citiesFile, 'utf8'));
      const city = cities.find((c: any) => 
        c.name.toLowerCase() === cityName.toLowerCase() || 
        c.name.toLowerCase().includes(cityName.toLowerCase())
      );
      
      if (city) {
        log(`üèôÔ∏è –ì–æ—Ä–æ–¥ ${cityName} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Å ID: ${city.id}, URL: ${city.url}`);
        log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–π –ø–æ URL: ${city.url}`);
        
        // –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è URL –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
          await this.page.goto(city.url, {
            waitUntil: 'networkidle2',
            timeout: 30000
          });
          
          await delay(3000);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
          const pageContent = await this.page.content();
          if (pageContent.includes('–†–µ—Å—É—Ä—Å (Page) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π') || pageContent.includes('–Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏')) {
            log('üö´ Instagram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º —Å —ç—Ç–æ–≥–æ IP', 'error');
            return [];
          }
          
          log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–π...`);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞
          await this.hierarchy.parseLocationsInCity(this.page, city.id, city.name);
          
        } catch (error) {
          log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ ${city.url}: ${error}`, 'error');
          return [];
        }
        
        // –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞
        const newLocations = this.hierarchy.getLocationsForCity(cityName);
        log(`‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ ${newLocations.length} –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${cityName}`);
        
        return newLocations.slice(0, 20);
      }
    }
    
    log(`‚ùå –ì–æ—Ä–æ–¥ ${cityName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    return [];
    
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π: ${error}`, 'error');
    return [];
  }
}

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ë–ê–ó–´
  async createLocationDatabase(option: 'ukraine' | 'poland' | 'all'): Promise<void> {
    try {
      if (!this.page) await this.init();
      
      switch (option) {
        case 'ukraine':
          await this.createUkraineDatabase();
          break;
        case 'poland':
          await this.createPolandDatabase();
          break;
        case 'all':
          await this.createFullDatabase();
          break;
      }
      
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã: ${error}`, 'error');
      throw error;
    }
  }

  private async createUkraineDatabase(): Promise<void> {
    log('üá∫üá¶ –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã...');
    
    // –ü–∞—Ä—Å–∏–º –≥–æ—Ä–æ–¥–∞ –£–∫—Ä–∞–∏–Ω—ã
    const cities = await this.hierarchy.parseCitiesInCountry(this.page, 'UA', 'ukraine');
    
    // –ò—â–µ–º –ö–∏–µ–≤ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤
    const kyiv = cities.find(city => 
      city.name.toLowerCase().includes('kyiv') || 
      city.name.toLowerCase().includes('–∫–∏–µ–≤')
    );
    
    if (kyiv) {
      log(`üèôÔ∏è –ù–∞–π–¥–µ–Ω –ö–∏–µ–≤: ${kyiv.name} (${kyiv.id})`);
      
      // –ü–∞—Ä—Å–∏–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –ö–∏–µ–≤–∞
      await this.hierarchy.parseLocationsInCity(this.page, kyiv.id, kyiv.name);
      
      log('‚úÖ –ë–∞–∑–∞ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ö–∏–µ–≤–∞ —Å–æ–∑–¥–∞–Ω–∞!');
    } else {
      log('‚ùå –ö–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤');
    }
  }

  private async createPolandDatabase(): Promise<void> {
    log('üáµüá± –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ü–æ–ª—å—à–∏...');
    
    const cities = await this.hierarchy.parseCitiesInCountry(this.page, 'PL', 'poland');
    
    // –ò—â–µ–º –í–∞—Ä—à–∞–≤—É
    const warsaw = cities.find(city => 
      city.name.toLowerCase().includes('warsaw') || 
      city.name.toLowerCase().includes('warszawa')
    );
    
    if (warsaw) {
      log(`üèôÔ∏è –ù–∞–π–¥–µ–Ω–∞ –í–∞—Ä—à–∞–≤–∞: ${warsaw.name} (${warsaw.id})`);
      await this.hierarchy.parseLocationsInCity(this.page, warsaw.id, warsaw.name);
      log('‚úÖ –ë–∞–∑–∞ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –í–∞—Ä—à–∞–≤—ã —Å–æ–∑–¥–∞–Ω–∞!');
    }
  }

  private async createFullDatabase(): Promise<void> {
    log('üåç –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (—ç—Ç–æ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
    const countries = await this.hierarchy.parseCountries(this.page);
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${countries.length} —Å—Ç—Ä–∞–Ω. –ë–∞–∑–∞ —Å—Ç—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∞!`);
    log('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
  }

  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      this.page = null;
      log('LocationParser –∑–∞–∫—Ä—ã—Ç');
    }
  }

  getAuthStatus() {
    return { manual: true, authenticated: true };
  }

  private async setupRandomHeaders(): Promise<void> {
  // –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
  const headers = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.9,uk;q=0.8,ru;q=0.7',
    'Accept-Encoding': 'gzip, deflate, br',
    'DNT': Math.random() > 0.5 ? '1' : '0', // –°–ª—É—á–∞–π–Ω–æ–µ Do Not Track
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'none',
    'Cache-Control': 'max-age=0',
  };

  await this.page.setExtraHTTPHeaders(headers);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π timezone
  const timezones = [
    'Europe/Kiev', 'Europe/Warsaw', 'Europe/Berlin', 
    'America/New_York', 'Europe/London', 'Europe/Paris'
  ];
  const randomTZ = timezones[Math.floor(Math.random() * timezones.length)];
  
  await this.page.emulateTimezone(randomTZ);
  log(`üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone: ${randomTZ}`);
}

private async checkForCaptcha(): Promise<boolean> {
  try {
    // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–ø—á–∏ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const captchaSelectors = [
      '[data-testid="challenge"]',
      '.challenge_box',
      'input[name="captcha"]',
      'iframe[title*="captcha"]',
      'div[class*="captcha"]'
    ];
    
    for (const selector of captchaSelectors) {
      const element = await this.page.$(selector);
      if (element) {
        log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!', 'warn');
        return true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const pageText = await this.page.$eval('body', (el: any) => el.textContent).catch(() => '');
    const blockWords = ['challenge', 'captcha', 'blocked', 'temporarily unavailable'];
    
    if (blockWords.some(word => pageText.toLowerCase().includes(word))) {
      log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É!', 'warn');
      return true;
    }
    
    return false;
  } catch (error) {
    return false;
  }
}
}