import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import { PARSER_CONFIG } from '../config/parser';
import { delay, log } from '../utils/helpers';
import { CookieManager } from '../utils/cookieManager';
import { LocationHierarchy } from './locationHierarchy';

puppeteer.use(StealthPlugin());

export class LocationParser {
  private browser: any = null;
  public page: any = null;
  private cookieManager: CookieManager;
  private hierarchy: LocationHierarchy;
  private guestMode: boolean;

  constructor(guestMode: boolean = false) {
    this.cookieManager = new CookieManager();
    this.hierarchy = new LocationHierarchy();
    this.guestMode = guestMode;
  }

  async init(): Promise<void> {
    try {
      if (this.browser) {
        await this.browser.close();
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
      const launchOptions: any = {
        headless: false,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-blink-features=AutomationControlled',
          '--start-maximized'
        ]
      };

      // –í –≥–æ—Å—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
      if (this.guestMode) {
        launchOptions.args.push('--incognito');
        log('üîí –ó–∞–ø—É—Å–∫ –≤ –≥–æ—Å—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
      }

      this.browser = await puppeteer.launch(launchOptions);
      
      this.page = await this.browser.newPage();
      
      // User-Agent
      const userAgent = PARSER_CONFIG.userAgents[
        Math.floor(Math.random() * PARSER_CONFIG.userAgents.length)
      ];
      await this.page.setUserAgent(userAgent);
      
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
      if (!this.guestMode) {
        const savedAuth = await this.checkSavedAuth();
        
        if (!savedAuth) {
          await this.manualAuth();
        }
      } else {
        log('üë§ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      }
      
      log('LocationParser initialized successfully');
    } catch (error) {
      log(`Failed to initialize parser: ${error}`, 'error');
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  private async checkSavedAuth(): Promise<boolean> {
    try {
      const cookiesLoaded = await this.cookieManager.loadCookies(this.page);
      
      if (cookiesLoaded) {
        log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        const isValid = await this.cookieManager.isAuthValid(this.page);
        
        if (isValid) {
          log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –õ–æ–≥–∏–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
          return true;
        } else {
          log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞');
          this.cookieManager.clearCookies();
        }
      } else {
        log('üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç');
      }
      
      return false;
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}`, 'error');
      return false;
    }
  }

  private async manualAuth(): Promise<void> {
    await this.page.goto('https://www.instagram.com/accounts/login/', {
      waitUntil: 'networkidle2',
      timeout: 30000
    });
    
    await delay(2000);
    
    log('='.repeat(60));
    log('üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø INSTAGRAM –¢–†–ï–ë–£–ï–¢–°–Ø');
    log('1. –í–æ–π–¥–∏—Ç–µ –≤ Instagram –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    log('2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
    log('3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π');
    log('='.repeat(60));
    
    await new Promise<void>((resolve) => {
      process.stdin.once('data', () => {
        resolve();
      });
    });
    
    await this.page.goto('https://www.instagram.com/', {
      waitUntil: 'networkidle2'
    });
    
    const isAuth = await this.page.evaluate(() => {
      return !document.querySelector('input[name="username"]');
    });
    
    if (isAuth) {
      log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
      await this.cookieManager.saveCookies(this.page);
      log('üíæ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ª–æ–≥–∏–Ω –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è!');
    } else {
      throw new Error('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }

  // –ù–û–í–´–ô –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  async findTopLocations(cityName: string): Promise<string[]> {
    try {
      if (!this.page) await this.init();
      
      log(`üîç –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      const savedLocations = this.hierarchy.getLocationsForCity(cityName);
      
      if (savedLocations.length > 0) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${savedLocations.length} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è ${cityName}`);
        return savedLocations.slice(0, 20); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É
      log(`üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è ${cityName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –ª–æ–∫–∞—Ü–∏–π. –í–∞—Ä–∏–∞–Ω—Ç—ã:');
      log('1. –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
      log('2. –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–ª—è –ü–æ–ª—å—à–∏');
      log('3. –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (–¥–æ–ª–≥–æ)');
      
      return [];
      
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π: ${error}`, 'error');
      return [];
    }
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ë–ê–ó–´
  async createLocationDatabase(option: 'ukraine' | 'poland' | 'all'): Promise<void> {
    try {
      if (!this.page) await this.init();
      
      switch (option) {
        case 'ukraine':
          await this.createUkraineDatabase();
          break;
        case 'poland':
          await this.createPolandDatabase();
          break;
        case 'all':
          await this.createFullDatabase();
          break;
      }
      
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã: ${error}`, 'error');
      throw error;
    }
  }

  private async createUkraineDatabase(): Promise<void> {
    log('üá∫üá¶ –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã...');
    
    // –ü–∞—Ä—Å–∏–º –≥–æ—Ä–æ–¥–∞ –£–∫—Ä–∞–∏–Ω—ã
    const cities = await this.hierarchy.parseCitiesInCountry(this.page, 'UA', 'ukraine');
    
    // –ò—â–µ–º –ö–∏–µ–≤ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤
    const kyiv = cities.find(city => 
      city.name.toLowerCase().includes('kyiv') || 
      city.name.toLowerCase().includes('–∫–∏–µ–≤')
    );
    
    if (kyiv) {
      log(`üèôÔ∏è –ù–∞–π–¥–µ–Ω –ö–∏–µ–≤: ${kyiv.name} (${kyiv.id})`);
      
      // –ü–∞—Ä—Å–∏–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –ö–∏–µ–≤–∞
      await this.hierarchy.parseLocationsInCity(this.page, kyiv.id, kyiv.name);
      
      log('‚úÖ –ë–∞–∑–∞ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ö–∏–µ–≤–∞ —Å–æ–∑–¥–∞–Ω–∞!');
    } else {
      log('‚ùå –ö–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤');
    }
  }

  private async createPolandDatabase(): Promise<void> {
    log('üáµüá± –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ü–æ–ª—å—à–∏...');
    
    const cities = await this.hierarchy.parseCitiesInCountry(this.page, 'PL', 'poland');
    
    // –ò—â–µ–º –í–∞—Ä—à–∞–≤—É
    const warsaw = cities.find(city => 
      city.name.toLowerCase().includes('warsaw') || 
      city.name.toLowerCase().includes('warszawa')
    );
    
    if (warsaw) {
      log(`üèôÔ∏è –ù–∞–π–¥–µ–Ω–∞ –í–∞—Ä—à–∞–≤–∞: ${warsaw.name} (${warsaw.id})`);
      await this.hierarchy.parseLocationsInCity(this.page, warsaw.id, warsaw.name);
      log('‚úÖ –ë–∞–∑–∞ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –í–∞—Ä—à–∞–≤—ã —Å–æ–∑–¥–∞–Ω–∞!');
    }
  }

  private async createFullDatabase(): Promise<void> {
    log('üåç –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (—ç—Ç–æ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
    const countries = await this.hierarchy.parseCountries(this.page);
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${countries.length} —Å—Ç—Ä–∞–Ω. –ë–∞–∑–∞ —Å—Ç—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∞!`);
    log('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
  }

  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      this.page = null;
      log('LocationParser –∑–∞–∫—Ä—ã—Ç');
    }
  }

  getAuthStatus() {
    return { manual: true, authenticated: true };
  }
}