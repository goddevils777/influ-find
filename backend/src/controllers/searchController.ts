import { Request, Response } from 'express';
import { InstagramParser } from '../parsers/instagram';
import { InfluencerService } from '../services/influencerService';
import { cacheService } from '../services/cacheService';
import { log } from '../utils/helpers';



export const searchByCity = async (req: Request, res: Response) => {
  try {
    log(`üîç searchByCity –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(req.body)}`);
    const { cityName, guestMode } = req.body;
    
    if (!cityName) {
      log(`‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞`);
      return res.status(400).json({ error: 'City name is required' });
    }

    log(`üîç –ò—â–µ–º –≥–æ—Ä–æ–¥: ${cityName}`);
    
    // –î–û–ë–ê–í–¨ –ü–†–û–í–ï–†–ö–£ –ï–°–¢–¨ –õ–ò –£–ñ–ï –õ–û–ö–ê–¶–ò–ò –î–õ–Ø –ì–û–†–û–î–ê
    log(`üîç –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LocationHierarchy...`);
    const { LocationHierarchy } = require('../parsers/locationHierarchy');
    const hierarchy = new LocationHierarchy();
    
    log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName}`);
    const existingLocations = hierarchy.getLocationsForCity(cityName);
    
    log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–∫–∞—Ü–∏–π: ${existingLocations.length}`);
    
    if (existingLocations.length > 0) {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è ${cityName}: ${existingLocations.length}`);
      return res.json({
        success: true,
        data: {
          city: cityName,
          locationsFound: existingLocations.length,
          message: '–õ–æ–∫–∞—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          fromCache: true
        }
      });
    }

    log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName}`);
    const cacheKey = `city:${cityName.toLowerCase().trim()}${guestMode ? ':guest' : ''}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedResult = cacheService.get(cacheKey);
    if (cachedResult) {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ –¥–ª—è ${cityName}`);
      return res.json({
        success: true,
        data: cachedResult,
        cached: true
      });
    }

    log(`üîß –°–æ–∑–¥–∞–µ–º InfluencerService —Å guestMode: true`);
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–û–°–¢–ï–í–û–ô –†–ï–ñ–ò–ú
    const influencerService = new InfluencerService(true); // true = –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
    
    log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–∞: ${cityName}`);
    const influencers = await influencerService.getInfluencersByCity(cityName);
    
    log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: ${influencers.length}`);
    
    const result = {
      city: cityName,
      influencers: influencers,
      status: 'completed',
      lastUpdated: new Date().toISOString(),
      mode: 'guest'
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à`);
    cacheService.set(cacheKey, result);
    
    res.json({
      success: true,
      data: result,
      cached: false
    });
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ searchByCity: ${error}`, 'error');
    if (error instanceof Error) {
      log(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${error.message}`, 'error');
      log(`‚ùå Stack trace: ${error.stack}`, 'error');
    }
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

export const getParserStatus = (req: Request, res: Response) => {
  const cacheStats = cacheService.getStats();
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram (–µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
  let authStatus = { total: 0, active: 0, blocked: 0 };
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const { LocationParser } = require('../parsers/locationParser');
    const tempParser = new LocationParser();
    authStatus = tempParser.getAuthStatus();
  } catch (error) {
    log(`Error getting auth status: ${error}`, 'warn');
  }
  
  res.json({
    isRunning: false, // –ó–ê–ú–ï–ù–ò parser.getStatus() –ù–ê false
    cache: cacheStats,
    instagram: {
      accounts: authStatus,
      status: authStatus.active > 0 ? 'connected' : 'disconnected'
    }
  });
};

export const forceParseCity = async (req: Request, res: Response) => {
  try {
    const { cityName } = req.body;
    
    if (!cityName) {
      return res.status(400).json({ error: 'City name is required' });
    }

    log(`üîß –°–æ–∑–¥–∞–µ–º InfluencerService —Å guestMode: true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞`);
    const influencerService = new InfluencerService(true); // –°–û–ó–î–ê–ô –ù–û–í–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
    const influencers = await influencerService.parseNewCity(cityName);
    
    res.json({
      success: true,
      data: {
        city: cityName,
        influencers: influencers,
        forced: true
      }
    });
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      error: 'Force parse failed' 
    });
  }
};