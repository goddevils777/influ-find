// backend/src/utils/parsingCheckpoint.ts - –ù–û–í–´–ô –§–ê–ô–õ
import fs from 'fs';
import path from 'path';
import { log } from './helpers';

export interface CheckpointData {
  locationId: string;
  locationUrl: string;
  currentPostIndex: number;
  totalPosts: number;
  foundInfluencers: any[];
  lastProcessedPost: string;
  timestamp: string;
  sessionId: string;
}

export class ParsingCheckpoint {
  private checkpointPath = path.join(__dirname, '../../data/checkpoints');

  constructor() {
    if (!fs.existsSync(this.checkpointPath)) {
      fs.mkdirSync(this.checkpointPath, { recursive: true });
    }
  }

  // –°–æ–∑–¥–∞—Ç—å checkpoint —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  saveCheckpoint(data: CheckpointData): void {
    try {
      const checkpointFile = path.join(this.checkpointPath, `checkpoint_${data.locationId}.json`);
      const checkpointData = {
        ...data,
        timestamp: new Date().toISOString(),
        sessionId: this.generateSessionId()
      };
      
      fs.writeFileSync(checkpointFile, JSON.stringify(checkpointData, null, 2));
      log(`üíæ Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${data.currentPostIndex}/${data.totalPosts} –ø–æ—Å—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ ${data.foundInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint: ${error}`, 'error');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π checkpoint
  loadCheckpoint(locationId: string): CheckpointData | null {
    try {
      const checkpointFile = path.join(this.checkpointPath, `checkpoint_${locationId}.json`);
      
      if (fs.existsSync(checkpointFile)) {
        const data = fs.readFileSync(checkpointFile, 'utf8');
        const checkpoint = JSON.parse(data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ checkpoint –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        const checkpointAge = Date.now() - new Date(checkpoint.timestamp).getTime();
        const maxAge = 60 * 60 * 1000; // 1 —á–∞—Å
        
        if (checkpointAge < maxAge) {
          log(`üîÑ –ù–∞–π–¥–µ–Ω checkpoint: ${checkpoint.currentPostIndex}/${checkpoint.totalPosts} –ø–æ—Å—Ç–æ–≤, ${checkpoint.foundInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
          return checkpoint;
        } else {
          log(`üóëÔ∏è Checkpoint —É—Å—Ç–∞—Ä–µ–ª (${Math.round(checkpointAge / (60 * 1000))} –º–∏–Ω), —É–¥–∞–ª—è–µ–º`);
          fs.unlinkSync(checkpointFile);
        }
      }
      
      return null;
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ checkpoint: ${error}`, 'error');
      return null;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å checkpoint –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  clearCheckpoint(locationId: string): void {
    try {
      const checkpointFile = path.join(this.checkpointPath, `checkpoint_${locationId}.json`);
      if (fs.existsSync(checkpointFile)) {
        fs.unlinkSync(checkpointFile);
        log(`üóëÔ∏è Checkpoint –æ—á–∏—â–µ–Ω –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId}`);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è checkpoint: ${error}`, 'error');
    }
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N –ø–æ—Å—Ç–æ–≤
  autoSave(data: CheckpointData, interval: number = 3): boolean {
    if (data.currentPostIndex % interval === 0) {
      this.saveCheckpoint(data);
      return true;
    }
    return false;
  }

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  emergencySave(data: CheckpointData): void {
    try {
      const emergencyFile = path.join(this.checkpointPath, `emergency_${data.locationId}_${Date.now()}.json`);
      fs.writeFileSync(emergencyFile, JSON.stringify(data, null, 2));
      log(`üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï: ${data.foundInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç—É ${data.currentPostIndex}`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error}`, 'error');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ checkpoint'—ã
  getAllCheckpoints(): CheckpointData[] {
    try {
      const files = fs.readdirSync(this.checkpointPath);
      const checkpoints: CheckpointData[] = [];
      
      files
        .filter(file => file.startsWith('checkpoint_') && file.endsWith('.json'))
        .forEach(file => {
          try {
            const data = fs.readFileSync(path.join(this.checkpointPath, file), 'utf8');
            const checkpoint = JSON.parse(data);
            checkpoints.push(checkpoint);
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          }
        });
      
      return checkpoints.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    } catch (error) {
      return [];
    }
  }

  private generateSessionId(): string {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
}