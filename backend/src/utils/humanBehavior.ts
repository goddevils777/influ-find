import { log } from './helpers';

// –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
export class HumanBehavior {
  
  // –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞ (—á–∏—Ç–∞–µ—Ç, –¥—É–º–∞–µ—Ç)
  static async humanDelay(min: number = 2000, max: number = 8000): Promise<void> {
    const delay = Math.random() * (max - min) + min;
    return new Promise(resolve => setTimeout(resolve, delay));
  }
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞
  static async humanScroll(page: any): Promise<void> {
    const scrolls = Math.floor(Math.random() * 3) + 2; // 2-4 —Å–∫—Ä–æ–ª–ª–∞
    
    for (let i = 0; i < scrolls; i++) {
      const scrollDistance = Math.floor(Math.random() * 500) + 300; // 300-800px
      await page.evaluate((distance: number) => {
        window.scrollBy(0, distance);
      }, scrollDistance);
      
      await HumanBehavior.smartDelay();
    }
  }
  
  // –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
  static async humanMouseMove(page: any): Promise<void> {
    const x = Math.floor(Math.random() * 800) + 100;
    const y = Math.floor(Math.random() * 600) + 100;
    
    await page.mouse.move(x, y, { steps: Math.floor(Math.random() * 5) + 3 });
    await HumanBehavior.smartDelay();
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞
static async humanPageLoad(page: any, url: string): Promise<void> {
  // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º (–∫–∞–∫ –±—É–¥—Ç–æ —á–∏—Ç–∞–µ–º URL)
  await HumanBehavior.smartDelay();
  
  await page.goto(url, { 
    waitUntil: 'domcontentloaded', // –ù–µ –∂–¥–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
    timeout: 15000 
  });
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
  await HumanBehavior.smartDelay();
  
  // –°–ª—É—á–∞–π–Ω–æ –¥–≤–∏–≥–∞–µ–º –º—ã—à—å—é –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
  await this.humanMouseMove(page);
  
  // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
  await page.waitForLoadState('networkidle', { timeout: 10000 }).catch(() => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç—ã - –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  });
}

// –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∏–∫–∞ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞
static async humanClick(page: any, selector: string): Promise<void> {
  try {
    const element = await page.waitForSelector(selector, { timeout: 5000 });
    if (element) {
      // –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
      await element.hover();
      await HumanBehavior.smartDelay();
      
      // –ö–ª–∏–∫–∞–µ–º —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º offset
      const box = await element.boundingBox();
      if (box) {
        const x = box.x + box.width/2 + (Math.random() - 0.5) * 10;
        const y = box.y + box.height/2 + (Math.random() - 0.5) * 10;
        await page.mouse.click(x, y);
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–ª–∏–∫–∞
  }
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
static async humanType(page: any, selector: string, text: string): Promise<void> {
  await page.focus(selector);
  await HumanBehavior.smartDelay();
  
  // –ü–µ—á–∞—Ç–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
  for (const char of text) {
    await page.keyboard.type(char, { 
      delay: Math.random() * 100 + 50 // 50-150ms –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
    });
    
    // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –∫–∞–∫ –±—É–¥—Ç–æ –¥—É–º–∞–µ–º
    if (Math.random() > 0.8) {
      await this.humanDelay(200, 800);
    }
  }
}

// –ò–º–∏—Ç–∞—Ü–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è (—á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç)
static async humanIdle(): Promise<void> {
  const idleTime = Math.random() * 10000 + 5000; // 5-15 —Å–µ–∫—É–Ω–¥
  log(`üò¥ –û—Ç–¥—ã—Ö–∞–µ–º ${Math.round(idleTime/1000)} —Å–µ–∫—É–Ω–¥ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫...`);
  await this.humanDelay(idleTime, idleTime + 1000);
}

// –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
static async randomActivity(page: any): Promise<void> {
  const actions = [
    () => this.humanMouseMove(page),
    () => this.humanScroll(page),
    () => page.keyboard.press('Tab'), // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏—à–∞–º–∏
    () => page.keyboard.press('Space'), // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–º
    () => this.humanIdle()
  ];
  
  const randomAction = actions[Math.floor(Math.random() * actions.length)];
  await randomAction();
}
// –£–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
static getSmartDelay(): { min: number, max: number } {
  const hour = new Date().getHours();
  
  // –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (hour >= 0 && hour <= 6) {
    return { min: 5000, max: 12000 }; // 5-12 —Å–µ–∫
  }
  
  // –£—Ç—Ä–æ - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
  if (hour >= 7 && hour <= 11) {
    return { min: 3000, max: 8000 }; // 3-8 —Å–µ–∫
  }
  
  // –î–µ–Ω—å - –±—ã—Å—Ç—Ä–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (hour >= 12 && hour <= 18) {
    return { min: 2000, max: 6000 }; // 2-6 —Å–µ–∫
  }
  
  // –í–µ—á–µ—Ä - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  return { min: 3000, max: 9000 }; // 3-9 —Å–µ–∫
}

// –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
static async smartDelay(): Promise<void> {
  const { min, max } = this.getSmartDelay();
  await this.humanDelay(min, max);
}
// –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫)
static async technicalBreak(): Promise<void> {
  const breakType = Math.random();
  
  if (breakType > 0.8) {
    console.log('üì± –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    await this.humanDelay(3000, 8000);
  } else if (breakType > 0.6) {
    console.log('üîÑ –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫...');
    await this.humanDelay(2000, 5000);
  } else if (breakType > 0.4) {
    console.log('‚òï –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ—Ñ–µ-–±—Ä–µ–π–∫...');
    await this.humanDelay(10000, 30000);
  }
  // –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞
}

// –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤
static async maybeDoTechnicalBreak(): Promise<void> {
  if (Math.random() > 0.9) { // 10% —à–∞–Ω—Å
    await this.technicalBreak();
  }
}
}

