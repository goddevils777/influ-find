import { Router } from 'express';
import { Request, Response } from 'express';
import { searchByCity, getParserStatus, forceParseCity } from '../controllers/searchController';
import { log } from '../utils/helpers';

const router = Router();

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç—ã
router.post('/city', searchByCity);
router.get('/status', getParserStatus);
router.post('/parse', forceParseCity);

// –ü–æ–∏—Å–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–æ–∫–∞—Ü–∏—è–º
router.post('/locations', async (req: Request, res: Response) => {
  let locationParser: any = null;
  
  try {
    const { cityName, cityId, locations, guestMode, forceRefresh } = req.body;
    
    if (!locations || locations.length === 0) {
      return res.status(400).json({ error: 'Locations are required' });
    }

    log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –≤ ${locations.length} –ª–æ–∫–∞—Ü–∏—è—Ö –≥–æ—Ä–æ–¥–∞ ${cityName}`);
    log(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${forceRefresh ? '–î–ê' : '–ù–ï–¢'}`);
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ò –í–°–ï–• –õ–û–ö–ê–¶–ò–ô –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ü–ê–†–°–ï–†–ê
    const { LocationCache } = require('../parsers/locationCache');
    const cache = new LocationCache();
    
    let allInfluencers: any[] = [];
    let locationsToProcess: any[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    for (const location of locations) {
    const locationId = location.id;
    
    log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name} (ID: ${locationId})`);
    
    const cacheExists = cache.hasCache(locationId);
    log(`   –§–∞–π–ª –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${cacheExists}`);
    
    if (cacheExists) {
        const cachedInfluencers = cache.getCache(locationId);
        log(`   –ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –≤ –∫—ç—à–µ: ${cachedInfluencers.length}`);
    }
    
    if (!forceRefresh && cacheExists) {
        const cachedInfluencers = cache.getCache(locationId);
        if (cachedInfluencers.length > 0) {
        log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name}: ${cachedInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
        allInfluencers.push(...cachedInfluencers);
        continue;
        }
    }
    
    // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    locationsToProcess.push(location);
    }
    
    log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${allInfluencers.length} –∏–∑ –∫—ç—à–∞, ${locationsToProcess.length} —Ç—Ä–µ–±—É—é—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞`);
    
    // –ï–°–õ–ò –í–°–ï –õ–û–ö–ê–¶–ò–ò –í –ö–≠–®–ï - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú –ë–†–ê–£–ó–ï–†
    if (locationsToProcess.length === 0) {
      log(`‚úÖ –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ, –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      
      const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
        index === self.findIndex(i => i.username === inf.username)
      );
      
      return res.json({
        success: true,
        data: {
          city: cityName,
          locationsSearched: locations.length,
          influencers: uniqueInfluencers,
          totalFound: uniqueInfluencers.length,
          newlyParsed: 0,
          fromCache: true,
          processedLocations: locations.map((loc: any) => ({
            name: loc.name,
            url: loc.url,
            id: loc.id
          }))
        }
      });
    }
    
    // –°–û–ó–î–ê–ï–ú –ü–ê–†–°–ï–† –¢–û–õ–¨–ö–û –î–õ–Ø –õ–û–ö–ê–¶–ò–ô –ë–ï–ó –ö–≠–®–ê
    const { PostParser } = require('../parsers/postParser');
    const { LocationParser } = require('../parsers/locationParser');
    
    log(`üîê –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è ${locationsToProcess.length} –ª–æ–∫–∞—Ü–∏–π`);
    locationParser = new LocationParser(false);
    await locationParser.init();
    log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
    
    // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑ –∫—ç—à–∞
    for (let i = 0; i < locationsToProcess.length; i++) {
      const location = locationsToProcess[i];
      
      try {
        log(`üìç –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–∏ ${i + 1}/${locationsToProcess.length}: ${location.name}`);
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú URL –õ–û–ö–ê–¶–ò–ò
        let locationUrl = location.url;
        
        // –£–±–∏—Ä–∞–µ–º /nearby/ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (locationUrl.includes('/nearby/')) {
          locationUrl = locationUrl.replace('/nearby/', '/');
          log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL —Å /nearby/: ${locationUrl}`);
        }
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏ –≤ –∫–æ–Ω—Ü–µ
        locationUrl = locationUrl.replace(/\/+$/, '/');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (!locationUrl.match(/\/explore\/locations\/\d+\/[^\/]+\/$/)) {
          log(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: ${locationUrl}`, 'warn');
        }
        
        const postParser = new PostParser(locationParser.page);
        const locationInfluencers = await postParser.parseLocationPosts(locationUrl, 10, forceRefresh);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê - –í–°–ï–ì–î–ê –î–û–ë–ê–í–õ–Ø–ï–ú –ö –û–ë–©–ï–ú–£ –ú–ê–°–°–ò–í–£
        allInfluencers.push(...locationInfluencers);

        log(`‚úÖ –õ–æ–∫–∞—Ü–∏—è ${location.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ: ${locationInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
        if (locationInfluencers.length > 0) {
          cache.saveCache(location.id, locationInfluencers);
        }
        
        log(`‚úÖ –õ–æ–∫–∞—Ü–∏—è ${location.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ: ${locationInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
        
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–∏ ${location.name}: ${error}`, 'error');
        continue;
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É (—Å—Ç–∞—Ä—ã–µ –∏–∑ –∫—ç—à–∞ + –Ω–æ–≤—ã–µ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
      index === self.findIndex(i => i.username === inf.username)
    );
    
    log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: ${allInfluencers.length}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueInfluencers.length}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      data: {
        city: cityName,
        locationsSearched: locations.length,
        influencers: uniqueInfluencers,
        totalFound: uniqueInfluencers.length,
        newlyParsed: locationsToProcess.length,
        fromCache: locationsToProcess.length === 0,
        processedLocations: locations.map((loc: any) => ({
          name: loc.name,
          url: loc.url,
          id: loc.id
        }))
      }
    });
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º: ${error}`, 'error');
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  } finally {
    if (locationParser) {
      try {
        await locationParser.close();
        log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç`);
      } catch (closeError) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ${closeError}`, 'error');
      }
    }
  }
});

// backend/src/routes/searchRoutes.ts - –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ export default router;
// backend/src/routes/searchRoutes.ts - –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ export default router;

// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
router.post('/profile', async (req: Request, res: Response) => {
  let locationParser: any = null;
  
  try {
    const { username, guestMode } = req.body;
    
    if (!username) {
      return res.status(400).json({ 
        success: false, 
        error: 'Username is required' 
      });
    }

    log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è @${username}`);
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–ô –†–ï–ñ–ò–ú (–ù–ï –ì–û–°–¢–ï–í–û–ô)
    const { LocationParser } = require('../parsers/locationParser');
    locationParser = new LocationParser(false); // false = –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    await locationParser.init();
    
    log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @${username} (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)`);
    
    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileData = await parseUserProfile(locationParser.page, username);
    
    if (!profileData) {
      return res.status(404).json({
        success: false,
        error: 'Profile not found or private'
      });
    }
    
    log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @${username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    
    res.json({
      success: true,
      data: profileData
    });
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è @${req.body.username}: ${error}`, 'error');
    res.status(500).json({ 
      success: false, 
      error: 'Profile parsing failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  } finally {
    if (locationParser) {
      try {
        await locationParser.close();
        log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫—Ä—ã—Ç`);
      } catch (closeError) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${closeError}`, 'error');
      }
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function parseUserProfile(page: any, username: string) {
  try {
    const profileUrl = `https://www.instagram.com/${username}/`;
    log(`üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ñ–∏–ª—é: ${profileUrl}`);
    
    await page.goto(profileUrl, { 
      waitUntil: 'networkidle2', 
      timeout: 15000 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
    const pageTitle = await page.title();
    if (pageTitle.includes('Page Not Found') || pageTitle.includes('Sorry')) {
      log(`‚ùå –ü—Ä–æ—Ñ–∏–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –§–û–†–ú–£ –õ–û–ì–ò–ù–ê
    const hasLoginForm = await page.evaluate(() => {
      return !!document.querySelector('input[name="username"]');
    });
    
    if (hasLoginForm) {
      log(`‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @${username} - —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞`);
      return null;
    }
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profileData = await page.evaluate(() => {
      // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      let followersCount = 0;
      let followersText = '';
      
      // –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
      const allElements = Array.from(document.querySelectorAll('*'));
      for (const el of allElements) {
        const text = el.textContent || '';
        if (text.match(/\d+[KMB]?\s*(followers|–ø–æ–¥–ø–∏—Å—á–∏–∫)/i) && text.length < 100) {
          followersText = text;
          break;
        }
      }
      
      if (followersText) {
        const match = followersText.match(/([\d,\.]+[KMBkmb]?)/);
        if (match) {
          let num = match[1].replace(/,/g, '').toLowerCase();
          if (num.includes('k')) {
            followersCount = parseFloat(num) * 1000;
          } else if (num.includes('m')) {
            followersCount = parseFloat(num) * 1000000;
          } else if (num.includes('b')) {
            followersCount = parseFloat(num) * 1000000000;
          } else {
            followersCount = parseInt(num);
          }
        }
      }
      
      // –ü–æ–ª–Ω–æ–µ –∏–º—è - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      let fullName = '';
      const nameSelectors = [
        'h1',
        'h2',
        '[data-testid="user-name"]',
        'header h1',
        'header h2',
        'span[dir="auto"]'
      ];
      
      for (const selector of nameSelectors) {
        const nameEl = document.querySelector(selector);
        if (nameEl && nameEl.textContent && nameEl.textContent.trim().length > 0) {
          const text = nameEl.textContent.trim();
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ username
          if (!text.startsWith('@') && text.length < 50) {
            fullName = text;
            break;
          }
        }
      }
      
      // –ë–∏–æ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      let bio = '';
      const bioSelectors = [
        'div[class*="_a6hd"] span',
        'header section div span',
        '[data-testid="user-description"] span',
        'span[class*="_ap3a"]',
        'span[class*="_aaco"]',
        'article header div div span',
        'header div span',
        'div[dir="auto"] span'
      ];
      
      for (const selector of bioSelectors) {
        const bioElements = document.querySelectorAll(selector);
        for (const bioEl of bioElements) {
          if (bioEl && bioEl.textContent) {
            const text = bioEl.textContent.trim();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –±–∏–æ (–Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
            if (text.length > 5 && text.length < 500 && 
                !text.includes('followers') && !text.includes('following') && 
                !text.includes('posts') && !text.match(/^\d+$/)) {
              bio = text;
              break;
            }
          }
        }
        if (bio) break;
      }
      
      // –ê–≤–∞—Ç–∞—Ä–∫–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      let avatarUrl = '';
      const avatarSelectors = [
        'img[alt*="profile picture"]',
        'img[data-testid="user-avatar"]', 
        'header img',
        'img[alt*="\'s profile picture"]',
        'canvas + img',
        'img[src*="profile"]'
      ];
      
      for (const selector of avatarSelectors) {
        const avatarEl = document.querySelector(selector);
        if (avatarEl) {
          const src = avatarEl.getAttribute('src');
          if (src && src.includes('http')) {
            avatarUrl = src;
            break;
          }
        }
      }
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
      let postsCount = 0;
      const allText = document.body.textContent || '';
      const postsMatch = allText.match(/(\d+[,\d]*)\s*posts/i);
      if (postsMatch) {
        postsCount = parseInt(postsMatch[1].replace(/,/g, ''));
      }
      
      return {
        followersCount,
        fullName,
        bio,
        avatarUrl,
        postsCount,
        lastUpdated: new Date().toISOString()
      };
    });
    
    log(`üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è @${username}:`);
    log(`   –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${profileData.followersCount}`);
    log(`   –ò–º—è: ${profileData.fullName}`);
    log(`   –ü–æ—Å—Ç—ã: ${profileData.postsCount}`);
    log(`   –ê–≤–∞—Ç–∞—Ä–∫–∞: ${profileData.avatarUrl ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    log(`   –ë–∏–æ: ${profileData.bio ? profileData.bio.substring(0, 50) + '...' : '–ù–µ—Ç'}`);
    
    return profileData;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è @${username}: ${error}`, 'error');
    return null;
  }
}

export default router;