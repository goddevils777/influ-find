import { Router } from 'express';
import { Request, Response } from 'express';
import { searchByCity, getParserStatus, forceParseCity } from '../controllers/searchController';
import { log } from '../utils/helpers';
import { authenticateToken } from './authRoutes';
import { requireProxyAndInstagram } from '../middleware/checkConnections';

const router = Router();

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç—ã
router.post('/city', searchByCity);
router.get('/status', getParserStatus);
router.post('/parse', forceParseCity);

// –ü–æ–∏—Å–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–æ–∫–∞—Ü–∏—è–º
router.post('/locations', authenticateToken, requireProxyAndInstagram, async (req: any, res: Response) => {
  let locationParser: any = null;
  
  try {
    const { cityName, cityId, locations, guestMode, forceRefresh, continueParsing, maxPosts = 10 } = req.body;
    
    if (!locations || locations.length === 0) {
      return res.status(400).json({ error: 'Locations are required' });
    }

    log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –≤ ${locations.length} –ª–æ–∫–∞—Ü–∏—è—Ö –≥–æ—Ä–æ–¥–∞ ${cityName}`);
    log(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${forceRefresh ? '–î–ê' : '–ù–ï–¢'}`);
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ò –í–°–ï–• –õ–û–ö–ê–¶–ò–ô –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ü–ê–†–°–ï–†–ê
    const { LocationCache } = require('../parsers/locationCache');
    const cache = new LocationCache();
    
    let allInfluencers: any[] = [];
    let locationsToProcess: any[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    for (const location of locations) {
    const locationId = location.id;
    
    log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name} (ID: ${locationId})`);
    
    const cacheExists = cache.hasCache(locationId);
    log(`   –§–∞–π–ª –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${cacheExists}`);
    
    if (cacheExists) {
        const cachedInfluencers = cache.getCache(locationId);
        log(`   –ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –≤ –∫—ç—à–µ: ${cachedInfluencers.length}`);
    }
    
    if (!forceRefresh && !continueParsing && cacheExists) {
        const cachedInfluencers = cache.getCache(locationId);
        if (cachedInfluencers.length > 0) {
        log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name}: ${cachedInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
        allInfluencers.push(...cachedInfluencers);
        continue;
        }
    }

    // –ï—Å–ª–∏ continueParsing = true, –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    if (continueParsing && cacheExists) {
        const cachedInfluencers = cache.getCache(locationId);
        log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º ${cachedInfluencers.length} –∏–∑ –∫—ç—à–∞ + –ø–∞—Ä—Å–∏–º –¥–∞–ª—å—à–µ`);
        allInfluencers.push(...cachedInfluencers);
    }

    // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    locationsToProcess.push(location);
    }
    
    // –î–û–ë–ê–í–¨ –ü–û–°–õ–ï –°–¢–†–û–ö–ò: log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${allInfluencers.length} –∏–∑ –∫—ç—à–∞, ${locationsToProcess.length} —Ç—Ä–µ–±—É—é—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞`);

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –ù–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    if (!forceRefresh && !continueParsing) {
    log(`üìã –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –∫—ç—à–∞`);
    

    
    log(`üìä –í—Å–µ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞: ${allInfluencers.length}`);
    allInfluencers.forEach((inf, index) => {
    log(`   ${index + 1}. @${inf.username} (${inf.followersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)`);
    });

    const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
        index === self.findIndex(i => i.username === inf.username)
    );

    log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${uniqueInfluencers.length}`);
    
    return res.json({
        success: true,
        data: {
        city: cityName,
        locationsSearched: locations.length,
        influencers: uniqueInfluencers,
        totalFound: uniqueInfluencers.length,
        newlyParsed: 0,
        fromCache: true,
        message: uniqueInfluencers.length === 0 ? 
            '–í –∫—ç—à–µ –Ω–µ—Ç –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–°–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—ã—Ö" –¥–ª—è –ø–æ–∏—Å–∫–∞.' : 
            `–ü–æ–∫–∞–∑–∞–Ω–æ ${uniqueInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞`,
        processedLocations: locations.map((loc: any) => ({
            name: loc.name,
            url: loc.url,
            id: loc.id
        }))
        }
    });
    }

// –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∑–Ω–∞—á–∏—Ç forceRefresh=true, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
log(`üîÑ ${forceRefresh ? '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞'} - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ ${locationsToProcess.length} –ª–æ–∫–∞—Ü–∏–π`);
    
    // –ï–°–õ–ò –í–°–ï –õ–û–ö–ê–¶–ò–ò –í –ö–≠–®–ï - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú –ë–†–ê–£–ó–ï–†
    if (locationsToProcess.length === 0) {
      log(`‚úÖ –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ, –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      
      const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
        index === self.findIndex(i => i.username === inf.username)
      );
      
      return res.json({
        success: true,
        data: {
          city: cityName,
          locationsSearched: locations.length,
          influencers: uniqueInfluencers,
          totalFound: uniqueInfluencers.length,
          newlyParsed: 0,
          fromCache: true,
          processedLocations: locations.map((loc: any) => ({
            name: loc.name,
            url: loc.url,
            id: loc.id
          }))
        }
      });
    }
    
    // –ò –∑–∞–º–µ–Ω–∏ –Ω–∞:
    const { PostParser } = require('../parsers/postParser');
    const { LocationParser } = require('../parsers/locationParser');

    log(`üîê –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è ${locationsToProcess.length} –ª–æ–∫–∞—Ü–∏–π`);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤—å middleware requireProxyAndInstagram)
    const userId = (req as any).user?.userId;
    const userConfig = (req as any).userConfig;

    if (!userId || !userConfig) {
      throw new Error('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä–æ–∫—Å–∏+Instagram.');
    }

    log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    log(`üîó –ü—Ä–æ–∫—Å–∏: ${userConfig.proxyConfig.host}:${userConfig.proxyConfig.port}`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    locationParser = new LocationParser(false, {
      userId: userId,
      proxyConfig: userConfig.proxyConfig
    });
    await locationParser.init();
    log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
    
    // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑ –∫—ç—à–∞
    for (let i = 0; i < locationsToProcess.length; i++) {
      const location = locationsToProcess[i];
      
      try {
        log(`üìç –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–∏ ${i + 1}/${locationsToProcess.length}: ${location.name}`);
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú URL –õ–û–ö–ê–¶–ò–ò
        let locationUrl = location.url;
        
        // –£–±–∏—Ä–∞–µ–º /nearby/ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (locationUrl.includes('/nearby/')) {
          locationUrl = locationUrl.replace('/nearby/', '/');
          log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL —Å /nearby/: ${locationUrl}`);
        }
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏ –≤ –∫–æ–Ω—Ü–µ
        locationUrl = locationUrl.replace(/\/+$/, '/');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (!locationUrl.match(/\/explore\/locations\/\d+\/[^\/]+\/$/)) {
          log(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: ${locationUrl}`, 'warn');
        }
        
        const postParser = new PostParser(locationParser.page);
        const locationInfluencers = await postParser.parseLocationPosts(locationUrl, maxPosts, forceRefresh);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê - –í–°–ï–ì–î–ê –î–û–ë–ê–í–õ–Ø–ï–ú –ö –û–ë–©–ï–ú–£ –ú–ê–°–°–ò–í–£
        allInfluencers.push(...locationInfluencers);

        log(`‚úÖ –õ–æ–∫–∞—Ü–∏—è ${location.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ: ${locationInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
        if (locationInfluencers.length > 0) {
          cache.saveCache(location.id, locationInfluencers);
        }
        
        log(`‚úÖ –õ–æ–∫–∞—Ü–∏—è ${location.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ: ${locationInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
        
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–∏ ${location.name}: ${error}`, 'error');
        continue;
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É (—Å—Ç–∞—Ä—ã–µ –∏–∑ –∫—ç—à–∞ + –Ω–æ–≤—ã–µ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
      index === self.findIndex(i => i.username === inf.username)
    );
    
    log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: ${allInfluencers.length}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueInfluencers.length}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      data: {
        city: cityName,
        locationsSearched: locations.length,
        influencers: uniqueInfluencers,
        totalFound: uniqueInfluencers.length,
        newlyParsed: locationsToProcess.length,
        fromCache: locationsToProcess.length === 0,
        processedLocations: locations.map((loc: any) => ({
          name: loc.name,
          url: loc.url,
          id: loc.id
        }))
      }
    });
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º: ${error}`, 'error');
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  } finally {
    if (locationParser) {
      try {
        await locationParser.close();
        log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç`);
      } catch (closeError) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ${closeError}`, 'error');
      }
    }
  }
});

// backend/src/routes/searchRoutes.ts - –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ export default router;
// backend/src/routes/searchRoutes.ts - –î–û–ë–ê–í–ò–¢–¨ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ export default router;

// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
router.post('/profile', async (req: Request, res: Response) => {
  let locationParser: any = null;
  
  try {
    const { username, guestMode } = req.body;
    
    if (!username) {
      return res.status(400).json({ 
        success: false, 
        error: 'Username is required' 
      });
    }

    log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è @${username}`);
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–ô –†–ï–ñ–ò–ú (–ù–ï –ì–û–°–¢–ï–í–û–ô)
    const { LocationParser } = require('../parsers/locationParser');
    locationParser = new LocationParser(false); // false = –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    await locationParser.init();
    
    log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è @${username} (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)`);
    
    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileData = await parseUserProfile(locationParser.page, username);
    
    if (!profileData) {
      return res.status(404).json({
        success: false,
        error: 'Profile not found or private'
      });
    }
    
    log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @${username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);

    // –°–û–•–†–ê–ù–Ø–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –í –ö–≠–®
    const { LocationCache } = require('../parsers/locationCache');
    const cache = new LocationCache();

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–æ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –≥–¥–µ –æ–Ω –µ—Å—Ç—å
    const fs = require('fs');
    const path = require('path');
    const dataPath = path.join(__dirname, '../../data/locations');

    if (fs.existsSync(dataPath)) {
    const files = fs.readdirSync(dataPath);
    
    log(`üîç –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å @${username} –≤ –∫—ç—à–∞—Ö –ª–æ–∫–∞—Ü–∏–π...`);
    log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞: ${files.length}`);

    files.forEach((file: string) => {
      if (file.startsWith('locations_') && file.endsWith('.json')) {
        const locationId = file.match(/locations_(.+)\.json/)?.[1];
        log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${file} (locationId: ${locationId})`);
        
        if (locationId) {
          const cachedInfluencers = cache.getCache(locationId) || [];
          const hasUser = cachedInfluencers.some((inf: any) => inf.username === username);
          log(`   –ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: ${cachedInfluencers.length}, –µ—Å—Ç—å @${username}: ${hasUser ? '–î–ê' : '–ù–ï–¢'}`);
            
            // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            let profileFound = false;
            const updatedInfluencers = cachedInfluencers.map((inf: any) => {
            if (inf.username === username) {
                profileFound = true;
                log(`üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å @${username} –≤ –ª–æ–∫–∞—Ü–∏–∏ ${locationId}, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...`);
                log(`   –°—Ç–∞—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞: ${inf.avatarUrl || '–ù–ï–¢'}`);
                log(`   –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞: ${profileData.avatarUrl || '–ù–ï–¢'}`);

                log(`üîç –û–¢–õ–ê–î–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø:`);
                log(`   profileData —Å–æ–¥–µ—Ä–∂–∏—Ç: ${Object.keys(profileData).join(', ')}`);
                log(`   –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è: ${profileData.avatarUrl ? '–î–ê' : '–ù–ï–¢'}`);
                
                const updated = {
                ...inf,
                followersCount: profileData.followersCount || inf.followersCount,
                fullName: profileData.fullName || inf.fullName,
                bio: profileData.bio || inf.bio,
                avatarUrl: profileData.avatarUrl || inf.avatarUrl,
                lastUpdated: profileData.lastUpdated
                };
                
                log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: –∞–≤–∞—Ç–∞—Ä–∫–∞ ${updated.avatarUrl || '–ù–ï–¢'}`);
                return updated;
            }
            return inf;
            });

            if (profileFound) {
            log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @${username} –Ω–∞–π–¥–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ª–æ–∫–∞—Ü–∏–∏ ${locationId}`);
            } else {
            log(`‚ùå –ü—Ä–æ—Ñ–∏–ª—å @${username} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞—Ü–∏–∏ ${locationId}`);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (updatedInfluencers.some((inf: any) => inf.username === username)) {
              log(`üíæ –°–û–•–†–ê–ù–Ø–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–≠–® –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId}`);
              log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: ${updatedInfluencers.length}`);
              
              // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∞–≤–∞—Ç–∞—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              const updatedUser = updatedInfluencers.find((inf: any) => inf.username === username);
              if (updatedUser) {
                log(`   –ê–≤–∞—Ç–∞—Ä–∫–∞ —É @${username} –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ: ${updatedUser.avatarUrl ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
              }
              
              cache.saveCache(locationId, updatedInfluencers);
              log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${locationId} —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ @${username}`);
            } else {
              log(`‚ùå –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú - –ø—Ä–æ—Ñ–∏–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
            }
        }
        }
    });
    }

    log(`‚úÖ –î–∞–Ω–Ω—ã–µ @${username} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –∫—ç—à–∞—Ö –ª–æ–∫–∞—Ü–∏–π`);
    
    res.json({
      success: true,
      data: profileData
    });
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è @${req.body.username}: ${error}`, 'error');
    res.status(500).json({ 
      success: false, 
      error: 'Profile parsing failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  } finally {
    if (locationParser) {
      try {
        await locationParser.close();
        log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫—Ä—ã—Ç`);
      } catch (closeError) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${closeError}`, 'error');
      }
    }
  }
});

async function parseUserProfile(page: any, username: string) {
  try {
    const profileUrl = `https://www.instagram.com/${username}/`;
    log(`üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ñ–∏–ª—é: ${profileUrl}`);
    
    await page.goto(profileUrl, { 
      waitUntil: 'networkidle2', 
      timeout: 15000 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const pageTitle = await page.title();
    if (pageTitle.includes('Page Not Found') || pageTitle.includes('Sorry')) {
      log(`‚ùå –ü—Ä–æ—Ñ–∏–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }
    
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profileData = await page.evaluate(() => {
      // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - –∏—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      let followersCount = 0;
      
      const headerLinks = document.querySelectorAll('header a');
      for (const link of headerLinks) {
        const text = link.textContent || '';
        if (text.includes('followers')) {
          const numberText = text.match(/([\d,\.]+[KMBkmb]?)/);
          if (numberText) {
            let num = numberText[1].replace(/,/g, '').toLowerCase();
            if (num.includes('k')) {
              followersCount = Math.round(parseFloat(num) * 1000);
            } else if (num.includes('m')) {
              followersCount = Math.round(parseFloat(num) * 1000000);
            } else {
              followersCount = parseInt(num.replace(/[^\d]/g, ''));
            }
          }
          break;
        }
      }
      
      // –ü–æ–ª–Ω–æ–µ –∏–º—è
      let fullName = '';
      const headerH2 = document.querySelector('header h2');
      if (headerH2?.textContent) {
        fullName = headerH2.textContent.trim();
      }
      
      // –ë–∏–æ - –∏—â–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
// –ë–∏–æ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ
      let bio = '';
      const bioSelectors = [
        'div[class*="_a6hd"] span',
        'header section div span',
        '[data-testid="user-description"] span',
        'span[class*="_ap3a"]',
        'span[class*="_aaco"]',
        'article header div div span',
        'header div span'
      ];

      for (const selector of bioSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          const text = element.textContent?.trim() || '';
          if (text.length > bio.length && 
              text.length > 10 && 
              text.length < 1000 && 
              !text.includes('–ø–æ–¥–ø–∏—Å—á–∏–∫') && 
              !text.includes('–ø—É–±–ª–∏–∫–∞—Ü') &&
              !text.match(/^\d+$/) &&
              !text.match(/^@\w+$/)) {
            bio = text;
          }
        }
      }
      
    // –ê–≤–∞—Ç–∞—Ä–∫–∞ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    let avatarUrl = '';
    const avatarSelectors = [
      'img[alt*="profile picture"]',
      'img[data-testid="user-avatar"]', 
      'header section img[src*="https"]',
      'img[alt*="\'s profile picture"]',
      'article img[src*="scontent"]',
      'div[role="img"] img'
    ];

    console.log('üîç –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É...');
    for (const selector of avatarSelectors) {
      const avatarEl = document.querySelector(selector);
      if (avatarEl) {
        const src = avatarEl.getAttribute('src');
        console.log(`–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: ${selector}, src: ${src?.substring(0, 80)}...`);
        if (src && (src.includes('scontent') || src.includes('cdninstagram') || src.includes('instagram'))) {
          avatarUrl = src;
          console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ' + src.substring(0, 100));
          break;
        }
      }
    }
    console.log('üì∑ –§–∏–Ω–∞–ª—å–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∫–∏: ' + (avatarUrl || '–ù–ï–¢'));
          
   return {
  followersCount,
  fullName: fullName || 'Unknown User',
  bio: bio || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
  avatarUrl,
  lastUpdated: new Date().toISOString()
};
    });
    
    log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ @${username}: ${profileData.followersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);

    // –î–æ–±–∞–≤—å –ø–æ—Å–ª–µ –Ω–µ—ë:
    log(`üîç –û–¢–õ–ê–î–ö–ê –ê–í–ê–¢–ê–†–ö–ò @${username}:`);
    log(`   –ù–∞–π–¥–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞: ${profileData.avatarUrl ? '–î–ê' : '–ù–ï–¢'}`);
    if (profileData.avatarUrl) {
      log(`   URL: ${profileData.avatarUrl.substring(0, 100)}...`);
    }
    log(`   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: ${JSON.stringify(profileData).length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    return profileData;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ @${username}: ${error}`, 'error');
    return null;
  }
}

export default router;