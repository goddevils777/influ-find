import { Router } from 'express';
import { Request, Response } from 'express';
import { searchByCity, getParserStatus, forceParseCity } from '../controllers/searchController';
import { log } from '../utils/helpers';

const router = Router();

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç—ã
router.post('/city', searchByCity);
router.get('/status', getParserStatus);
router.post('/parse', forceParseCity);

// –ü–æ–∏—Å–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ª–æ–∫–∞—Ü–∏—è–º
router.post('/locations', async (req: Request, res: Response) => {
  let locationParser: any = null;
  
  try {
    const { cityName, cityId, locations, guestMode, forceRefresh } = req.body;
    
    if (!locations || locations.length === 0) {
      return res.status(400).json({ error: 'Locations are required' });
    }

    log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –≤ ${locations.length} –ª–æ–∫–∞—Ü–∏—è—Ö –≥–æ—Ä–æ–¥–∞ ${cityName}`);
    log(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${forceRefresh ? '–î–ê' : '–ù–ï–¢'}`);
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ò –í–°–ï–• –õ–û–ö–ê–¶–ò–ô –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ü–ê–†–°–ï–†–ê
    const { LocationCache } = require('../parsers/locationCache');
    const cache = new LocationCache();
    
    let allInfluencers: any[] = [];
    let locationsToProcess: any[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ
    for (const location of locations) {
      const locationId = location.id;
      
      if (!forceRefresh && cache.hasCache(locationId)) {
        const cachedInfluencers = cache.getCache(locationId);
        if (cachedInfluencers.length > 0) {
          log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name}: ${cachedInfluencers.length} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤`);
          allInfluencers.push(...cachedInfluencers);
          continue;
        }
      }
      
      // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      locationsToProcess.push(location);
    }
    
    log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${allInfluencers.length} –∏–∑ –∫—ç—à–∞, ${locationsToProcess.length} —Ç—Ä–µ–±—É—é—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞`);
    
    // –ï–°–õ–ò –í–°–ï –õ–û–ö–ê–¶–ò–ò –í –ö–≠–®–ï - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú –ë–†–ê–£–ó–ï–†
    if (locationsToProcess.length === 0) {
      log(`‚úÖ –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ, –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      
      const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
        index === self.findIndex(i => i.username === inf.username)
      );
      
      return res.json({
        success: true,
        data: {
          city: cityName,
          locationsSearched: locations.length,
          influencers: uniqueInfluencers,
          totalFound: uniqueInfluencers.length,
          fromCache: true
        }
      });
    }
    
    // –°–û–ó–î–ê–ï–ú –ü–ê–†–°–ï–† –¢–û–õ–¨–ö–û –î–õ–Ø –õ–û–ö–ê–¶–ò–ô –ë–ï–ó –ö–≠–®–ê
    const { PostParser } = require('../parsers/postParser');
    const { LocationParser } = require('../parsers/locationParser');
    
    log(`üîê –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è ${locationsToProcess.length} –ª–æ–∫–∞—Ü–∏–π`);
    locationParser = new LocationParser(false);
    await locationParser.init();
    log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
    
    // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–∏ –±–µ–∑ –∫—ç—à–∞
    for (let i = 0; i < locationsToProcess.length; i++) {
      const location = locationsToProcess[i];
      
      try {
        log(`üìç –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞—Ü–∏–∏ ${i + 1}/${locationsToProcess.length}: ${location.name}`);
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú URL –õ–û–ö–ê–¶–ò–ò
        let locationUrl = location.url;
        
        // –£–±–∏—Ä–∞–µ–º /nearby/ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (locationUrl.includes('/nearby/')) {
          locationUrl = locationUrl.replace('/nearby/', '/');
          log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL —Å /nearby/: ${locationUrl}`);
        }
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏ –≤ –∫–æ–Ω—Ü–µ
        locationUrl = locationUrl.replace(/\/+$/, '/');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (!locationUrl.match(/\/explore\/locations\/\d+\/[^\/]+\/$/)) {
          log(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: ${locationUrl}`, 'warn');
        }
        
        const postParser = new PostParser(locationParser.page);
        const locationInfluencers = await postParser.parseLocationPosts(locationUrl, 10, forceRefresh);
        
        // –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
        if (forceRefresh) {
          log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–º–µ–Ω—è–µ–º –∫—ç—à –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name}`);
          cache.saveCache(location.id, locationInfluencers);
          allInfluencers.push(...locationInfluencers);
        } else {
          allInfluencers.push(...locationInfluencers);
        }
        
        log(`‚úÖ –õ–æ–∫–∞—Ü–∏—è ${location.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
        
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞—Ü–∏–∏ ${location.name}: ${error}`, 'error');
        continue;
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueInfluencers = allInfluencers.filter((inf, index, self) => 
      index === self.findIndex(i => i.username === inf.username)
    );
    
    log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: ${uniqueInfluencers.length}`);
    
    // –í –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç, –∑–∞–º–µ–Ω–∏:
    res.json({
    success: true,
    data: {
        city: cityName,
        locationsSearched: locations.length,
        influencers: uniqueInfluencers,
        totalFound: uniqueInfluencers.length,
        newlyParsed: locationsToProcess.length,
        fromCache: locationsToProcess.length === 0,
        
        // –î–û–ë–ê–í–¨ –≠–¢–ò –ù–û–í–´–ï –ü–û–õ–Ø:
        processedLocations: locations.map((loc: any) => ({
        name: loc.name,
        url: loc.url,
        id: loc.id
        }))
    }
    });
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º: ${error}`, 'error');
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  } finally {
    if (locationParser) {
      try {
        await locationParser.close();
        log(`‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç`);
      } catch (closeError) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ${closeError}`, 'error');
      }
    }
  }
});

export default router;