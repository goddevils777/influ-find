import { Router, Request, Response } from 'express';
import { authenticateToken } from './authRoutes';
import { UserService } from '../services/userService';
import { log } from '../utils/helpers';
import axios from 'axios';

const router = Router();
const userService = new UserService();

interface ProxyConfig {
  host: string;
  port: number;
  username?: string;
  password?: string;
  type: 'http' | 'https' | 'socks5';
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
router.post('/connect', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    const proxyConfig: ProxyConfig = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!proxyConfig.host || !proxyConfig.port) {
      return res.status(400).json({
        success: false,
        message: '–•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.email} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ ${proxyConfig.host}:${proxyConfig.port}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const testResult = await testProxyConnection(proxyConfig);
    
    if (!testResult.success) {
      return res.status(400).json({
        success: false,
        message: `–ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testResult.error}`
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
    const updated = await userService.updateProxyStatus(userId, true, proxyConfig);
    
    if (updated) {
      log(`‚úÖ –ü—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email}: ${proxyConfig.host}:${proxyConfig.port}`);
      res.json({
        success: true,
        message: '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω',
        ip: testResult.ip,
        country: testResult.country
      });
    } else {
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏'
      });
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
router.post('/disconnect', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.email} –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏`);

    // –¢–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–∞–µ–º Instagram –µ—Å–ª–∏ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω
    await userService.updateInstagramStatus(userId, false);
    await userService.updateProxyStatus(userId, false);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω. Instagram —Ç–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.'
    });

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏'
    });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
router.post('/test', authenticateToken, async (req: any, res: Response) => {
  try {
    const proxyConfig: ProxyConfig = req.body;
    
    if (!proxyConfig.host || !proxyConfig.port) {
      return res.status(400).json({
        success: false,
        message: '–•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      });
    }

    log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ ${proxyConfig.host}:${proxyConfig.port}`);

    const testResult = await testProxyConnection(proxyConfig);
    
    if (testResult.success) {
      res.json({
        success: true,
        message: '–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        ip: testResult.ip,
        country: testResult.country
      });
    } else {
      res.status(400).json({
        success: false,
        message: testResult.error
      });
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏
router.get('/status', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    const user = await userService.getUserById(userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      connected: user.proxyConnected,
      config: user.proxyConfig ? {
        host: user.proxyConfig.host,
        port: user.proxyConfig.port,
        type: user.proxyConfig.type,
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        hasAuth: !!(user.proxyConfig.username && user.proxyConfig.password)
      } : null
    });

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
async function testProxyConnection(proxyConfig: ProxyConfig): Promise<{
  success: boolean;
  ip?: string;
  country?: string;
  error?: string;
}> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏
    let proxyUrl = `${proxyConfig.type}://`;
    
    if (proxyConfig.username && proxyConfig.password) {
      proxyUrl += `${encodeURIComponent(proxyConfig.username)}:${encodeURIComponent(proxyConfig.password)}@`;
    }
    
    proxyUrl += `${proxyConfig.host}:${proxyConfig.port}`;

    // –°–æ–∑–¥–∞–µ–º axios –∏–Ω—Å—Ç–∞–Ω—Å —Å –ø—Ä–æ–∫—Å–∏
    const axiosWithProxy = axios.create({
      proxy: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = {
      proxy: {
        protocol: proxyConfig.type,
        host: proxyConfig.host,
        port: proxyConfig.port,
        auth: proxyConfig.username && proxyConfig.password ? {
          username: proxyConfig.username,
          password: proxyConfig.password
        } : undefined
      }
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    const response = await axiosWithProxy.get('http://httpbin.org/ip', config);
    
    if (response.data && response.data.origin) {
      const ip = response.data.origin;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      let country = 'Unknown';
      try {
        const geoResponse = await axiosWithProxy.get(`http://ip-api.com/json/${ip}`, config);
        if (geoResponse.data && geoResponse.data.country) {
          country = geoResponse.data.country;
        }
      } catch (geoError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      }

      log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: IP ${ip}, –°—Ç—Ä–∞–Ω–∞: ${country}`);
      return {
        success: true,
        ip: ip,
        country: country
      };
    } else {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏'
      };
    }

  } catch (error: any) {
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    if (error.code === 'ECONNREFUSED') {
      errorMessage = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç.';
    } else if (error.code === 'ETIMEDOUT') {
      errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.';
    } else if (error.code === 'ENOTFOUND') {
      errorMessage = '–•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏.';
    } else if (error.response?.status === 407) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.';
    } else if (error.message) {
      errorMessage = error.message;
    }

    log(`‚ùå –ü—Ä–æ–∫—Å–∏ —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: ${errorMessage}`, 'error');
    return {
      success: false,
      error: errorMessage
    };
  }
}

export default router;