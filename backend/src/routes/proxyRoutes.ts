import { Router, Request, Response } from 'express';
import { authenticateToken } from './authRoutes';
import { UserService } from '../services/userService';
import { log } from '../utils/helpers';
import axios from 'axios';

const router = Router();
const userService = new UserService();

interface ProxyConfig {
  host: string;
  port: number;
  username?: string;
  password?: string;
  type: 'http' | 'https' | 'socks5';
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
router.post('/connect', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    const proxyConfig: ProxyConfig = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!proxyConfig.host || !proxyConfig.port) {
      return res.status(400).json({
        success: false,
        message: '–•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.email} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ ${proxyConfig.host}:${proxyConfig.port}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const testResult = await testProxyConnection(proxyConfig);
    
    if (!testResult.success) {
      return res.status(400).json({
        success: false,
        message: `–ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testResult.error}`
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
    const updated = await userService.updateProxyStatus(userId, true, proxyConfig);
    
    if (updated) {
      log(`‚úÖ –ü—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email}: ${proxyConfig.host}:${proxyConfig.port}`);
      res.json({
        success: true,
        message: '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω',
        ip: testResult.ip,
        country: testResult.country
      });
    } else {
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏'
      });
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
router.post('/disconnect', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.email} –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏`);

    // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏, –ù–ï Instagram
    await userService.updateProxyStatus(userId, false);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω. Instagram –∞–∫–∫–∞—É–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω.'
    });

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏'
    });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
router.post('/test', authenticateToken, async (req: any, res: Response) => {
  try {
    const proxyConfig: ProxyConfig = req.body;
    
    if (!proxyConfig.host || !proxyConfig.port) {
      return res.status(400).json({
        success: false,
        message: '–•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      });
    }

    log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ ${proxyConfig.host}:${proxyConfig.port}`);

    const testResult = await testProxyConnection(proxyConfig);
    
    if (testResult.success) {
      res.json({
        success: true,
        message: '–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        ip: testResult.ip,
        country: testResult.country
      });
    } else {
      res.status(400).json({
        success: false,
        message: testResult.error
      });
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏
router.get('/status', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    const user = await userService.getUserById(userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      connected: user.proxyConnected,
      config: user.proxyConfig ? {
        host: user.proxyConfig.host,
        port: user.proxyConfig.port,
        type: user.proxyConfig.type,
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        hasAuth: !!(user.proxyConfig.username && user.proxyConfig.password)
      } : null
    });

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    });
  }
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
router.post('/test-instagram', authenticateToken, async (req: any, res: Response) => {
  try {
    const userId = req.user.userId;
    const user = await userService.getUserById(userId);
    
    if (!user || !user.proxyConnected || !user.proxyConfig) {
      return res.status(400).json({
        success: false,
        message: '–ü—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–∫—Å–∏.'
      });
    }

    log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    const testResult = await testInstagramThroughProxy(user.proxyConfig);
    
    res.json(testResult);

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${error}`, 'error');
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram'
    });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
async function testProxyConnection(proxyConfig: ProxyConfig): Promise<{
  success: boolean;
  ip?: string;
  country?: string;
  error?: string;
}> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏
    let proxyUrl = `${proxyConfig.type}://`;
    
    if (proxyConfig.username && proxyConfig.password) {
      proxyUrl += `${encodeURIComponent(proxyConfig.username)}:${encodeURIComponent(proxyConfig.password)}@`;
    }
    
    proxyUrl += `${proxyConfig.host}:${proxyConfig.port}`;

    // –°–æ–∑–¥–∞–µ–º axios –∏–Ω—Å—Ç–∞–Ω—Å —Å –ø—Ä–æ–∫—Å–∏
    const axiosWithProxy = axios.create({
      proxy: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = {
      proxy: {
        protocol: proxyConfig.type,
        host: proxyConfig.host,
        port: proxyConfig.port,
        auth: proxyConfig.username && proxyConfig.password ? {
          username: proxyConfig.username,
          password: proxyConfig.password
        } : undefined
      }
    };

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    const response = await axiosWithProxy.get('http://httpbin.org/ip', config);
    
    if (response.data && response.data.origin) {
      const ip = response.data.origin;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      let country = 'Unknown';
      try {
        const geoResponse = await axiosWithProxy.get(`http://ip-api.com/json/${ip}`, config);
        if (geoResponse.data && geoResponse.data.country) {
          country = geoResponse.data.country;
        }
      } catch (geoError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      }

      log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: IP ${ip}, –°—Ç—Ä–∞–Ω–∞: ${country}`);
      return {
        success: true,
        ip: ip,
        country: country
      };
    } else {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏'
      };
    }

  } catch (error: any) {
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    if (error.code === 'ECONNREFUSED') {
      errorMessage = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç.';
    } else if (error.code === 'ETIMEDOUT') {
      errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.';
    } else if (error.code === 'ENOTFOUND') {
      errorMessage = '–•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏.';
    } else if (error.response?.status === 407) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.';
    } else if (error.message) {
      errorMessage = error.message;
    }

    log(`‚ùå –ü—Ä–æ–∫—Å–∏ —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: ${errorMessage}`, 'error');
    return {
      success: false,
      error: errorMessage
    };
  }
}
// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
async function testInstagramThroughProxy(proxyConfig: ProxyConfig): Promise<{
  success: boolean;
  message: string;
  details?: any;
}> {
  const puppeteer = require('puppeteer-extra');
  const StealthPlugin = require('puppeteer-extra-plugin-stealth');
  
  puppeteer.use(StealthPlugin());
  
  let browser = null;
  
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏
    const launchOptions: any = {
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-blink-features=AutomationControlled',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    };

    // –î–ª—è SOCKS5 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
    if (proxyConfig.type === 'socks5') {
      if (proxyConfig.username && proxyConfig.password) {
        // SOCKS5 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP —Ç—É–Ω–Ω–µ–ª—å
        log('‚ö†Ô∏è SOCKS5 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Puppeteer –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ HTTP —Ç–µ—Å—Ç...');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ axios —Å SOCKS –∞–≥–µ–Ω—Ç–æ–º
        const testResult = await testSocks5Proxy(proxyConfig);
        if (!testResult.success) {
          throw new Error(testResult.error || 'SOCKS5 –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
        
        return {
          success: true,
          message: `SOCKS5 –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP: ${testResult.ip}. Instagram –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω.`,
          details: {
            proxyTested: true,
            ip: testResult.ip,
            country: testResult.country,
            note: 'SOCKS5 –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥'
          }
        };
      } else {
        // SOCKS5 –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        launchOptions.args.push(`--proxy-server=socks5://${proxyConfig.host}:${proxyConfig.port}`);
      }
    } else {
      // HTTP/HTTPS –ø—Ä–æ–∫—Å–∏
      launchOptions.args.push(`--proxy-server=${proxyConfig.type}://${proxyConfig.host}:${proxyConfig.port}`);
    }

    log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏: ${JSON.stringify(launchOptions.args)}`);

    browser = await puppeteer.launch(launchOptions);
    const page = await browser.newPage();

    // –î–ª—è HTTP/HTTPS –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    if ((proxyConfig.type === 'http' || proxyConfig.type === 'https') && 
        proxyConfig.username && proxyConfig.password) {
      await page.authenticate({
        username: proxyConfig.username,
        password: proxyConfig.password
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');

    log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Instagram...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –≤–æ–æ–±—â–µ –≤—ã–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    try {
      await page.goto('https://httpbin.org/ip', { 
        waitUntil: 'networkidle2',
        timeout: 15000 
      });
      
      const ipInfo = await page.evaluate(() => {
        try {
          return JSON.parse(document.body.innerText);
        } catch {
          return { origin: 'unknown' };
        }
      });
      
      log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–Ω–µ—à–Ω–∏–π IP: ${ipInfo.origin}`);
    } catch (ipError) {
      log(`‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: ${ipError}`, 'error');
      throw new Error(`–ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${ipError instanceof Error ? ipError.message : String(ipError)}`);
    }
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º Instagram
    await page.goto('https://www.instagram.com/', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    const mainPageTest = await page.evaluate(() => {
      return {
        title: document.title,
        hasInstagramElements: !!document.querySelector('div[role="main"]') || 
                            !!document.querySelector('article') ||
                            document.body.innerText.toLowerCase().includes('instagram'),
        bodyText: document.body.innerText.substring(0, 500),
        url: window.location.href
      };
    });

    if (!mainPageTest.hasInstagramElements) {
      log(`‚ùå Instagram –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. Title: ${mainPageTest.title}`, 'error');
      log(`‚ùå Body text: ${mainPageTest.bodyText}`, 'error');
      throw new Error('Instagram –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏');
    }

    log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Instagram –¥–æ—Å—Ç—É–ø–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º
    await page.goto('https://www.instagram.com/explore/locations/', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });

    const locationsTest = await page.evaluate(() => {
      const bodyText = document.body.innerText;
      return {
        hasBlockedMessage: bodyText.includes('429') || bodyText.includes('blocked') || bodyText.includes('rate limit'),
        hasLocationsContent: bodyText.toLowerCase().includes('locations') || bodyText.toLowerCase().includes('places'),
        statusIndicators: {
          has429: bodyText.includes('429'),
          hasBlocked: bodyText.includes('blocked'),
          hasRateLimit: bodyText.includes('rate limit')
        },
        bodyText: bodyText.substring(0, 300)
      };
    });

    log(`üìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–π: ${JSON.stringify(locationsTest)}`);

    if (locationsTest.hasBlockedMessage) {
      return {
        success: false,
        message: 'Instagram –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏—è–º —Å —ç—Ç–æ–≥–æ –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏.',
        details: {
          mainPageAccessible: true,
          locationsBlocked: true,
          blockReasons: locationsTest.statusIndicators
        }
      };
    }

    log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–∫–∞—Ü–∏–π Instagram –¥–æ—Å—Ç—É–ø–Ω–∞');

    await browser.close();

    return {
      success: true,
      message: 'Instagram –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.',
      details: {
        mainPageAccessible: true,
        locationsAccessible: true,
        proxyWorking: true
      }
    };

  } catch (error: any) {
    if (browser) {
      await browser.close();
    }

    log(`‚ùå –¢–µ—Å—Ç Instagram –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`, 'error');
    
    let errorMessage = error.message;
    
    if (error.message.includes('ERR_NO_SUPPORTED_PROXIES')) {
      errorMessage = 'Puppeteer –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∏–ø –ø—Ä–æ–∫—Å–∏. –ù–æ –ø—Ä–æ–∫—Å–∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.';
    } else if (error.message.includes('ERR_SOCKS_CONNECTION_FAILED')) {
      errorMessage = 'SOCKS5 –ø—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä.';
    } else if (error.message.includes('ERR_PROXY_CONNECTION_FAILED')) {
      errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç, –ø–æ—Ä—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.';
    } else if (error.message.includes('ERR_TUNNEL_CONNECTION_FAILED')) {
      errorMessage = '–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.';
    }
    
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Instagram: ${errorMessage}`,
      details: {
        error: error.message,
        proxyConfig: {
          host: proxyConfig.host,
          port: proxyConfig.port,
          type: proxyConfig.type
        }
      }
    };
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SOCKS5 –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
async function testSocks5Proxy(proxyConfig: ProxyConfig): Promise<{
  success: boolean;
  ip?: string;
  country?: string;
  error?: string;
}> {
  try {
    const { SocksProxyAgent } = require('socks-proxy-agent');
    
    let proxyUrl = `socks5://`;
    if (proxyConfig.username && proxyConfig.password) {
      proxyUrl += `${encodeURIComponent(proxyConfig.username)}:${encodeURIComponent(proxyConfig.password)}@`;
    }
    proxyUrl += `${proxyConfig.host}:${proxyConfig.port}`;
    
    const agent = new SocksProxyAgent(proxyUrl);
    
    const axiosWithProxy = axios.create({
      timeout: 10000,
      httpsAgent: agent,
      httpAgent: agent,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      }
    });

    const response = await axiosWithProxy.get('http://httpbin.org/ip');
    
    if (response.data && response.data.origin) {
      const ip = response.data.origin;
      
      let country = 'Unknown';
      try {
        const geoResponse = await axiosWithProxy.get(`http://ip-api.com/json/${ip}`);
        if (geoResponse.data && geoResponse.data.country) {
          country = geoResponse.data.country;
        }
      } catch (geoError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      }

      log(`‚úÖ SOCKS5 —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: IP ${ip}, –°—Ç—Ä–∞–Ω–∞: ${country}`);
      return {
        success: true,
        ip: ip,
        country: country
      };
    } else {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ SOCKS5 –ø—Ä–æ–∫—Å–∏'
      };
    }

  } catch (error: any) {
    log(`‚ùå SOCKS5 —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: ${error.message}`, 'error');
    return {
      success: false,
      error: error.message
    };
  }
}

export default router;